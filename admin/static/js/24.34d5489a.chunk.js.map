{"version":3,"sources":["views/events/EventsAdd.js"],"names":["EventsAdd","useState","categories","setCategories","mediaFile","setMediaFile","addingLoader","setaddingLoader","event","setEvent","toastMessages","setToastMessage","encodeHTML","str","buf","i","length","unshift","charCodeAt","join","loadCategories","a","CallCategoriesList","response","json","Categories","data","handleAdd","ev","preventDefault","medias","addEventCallback","mediaId","tempDT","date","addObject","title","location","price","startTime","endTime","description","category","isPublic","toString","console","log","AddEvent","ok","type","UploadMedia","useEffect","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","min","toISOString","split","onChange","col","md","xs","name","files","custom","filter","map","_id","host","tag","checked","color","defaultChecked","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","content","editor","size","toastMessage","position","show","autohide","fade","closeButton","Math","floor","random"],"mappings":"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","file":"static/js/24.34d5489a.chunk.js","sourcesContent":["\n\nimport React, { useState, useEffect } from 'react'\nimport { CToaster, CToastBody, CToastHeader, CToast, CInputFile, CSwitch, CSelect, CForm, CButton, CFormGroup, CCard, CSpinner, CCardBody, CCardFooter, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio, CImg }\n    from '@coreui/react'\nimport { EventsAdd as AddEvent } from '../../../src/server/EventsManagement'\nimport { UploadMedia } from '../../../src/server/MediasManagement'\nimport { CategoriesList as CallCategoriesList } from '../../../src/server/CategoriesManagement'\nimport { Editor } from '@tinymce/tinymce-react';\n\n\n\nconst EventsAdd = () => {\n    const [categories, setCategories] = useState([])\n    const [mediaFile, setMediaFile] = useState()\n    const [addingLoader, setaddingLoader] = useState(false)\n    const [event, setEvent] = useState(false)\n    const [toastMessages, setToastMessage] = useState([])\n    const encodeHTML = str => {\n        if (!str)\n            return ''\n        let buf = [];\n\n        for (var i = str.length - 1; i >= 0; i--) {\n            buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));\n        }\n\n        return buf.join('');\n    }\n    const loadCategories = async () => {\n        const response = await CallCategoriesList()\n        const Categories = (await response.json()).data\n        setCategories(Categories)\n    }\n    const handleAdd = async (ev) => {\n        ev.preventDefault()\n        event.medias = []\n        setaddingLoader(true)\n        const addEventCallback = async function (mediaId) {\n            if (mediaId !== -1) {\n                const tempDT = event.date\n                let addObject = {\n                    title: event.title,\n                    location: event.location,\n                    price: event.price,\n                    startTime: tempDT + ' ' + event.startTime,\n                    endTime: event.endTime ? tempDT + ' ' + event.endTime : '',\n                    date: event.date,\n                    description: encodeHTML(event.description),\n                    category: event.category,\n                    isPublic: event.isPublic ? event.isPublic.toString() : 'true',\n                    medias: [mediaId]\n                }\n                console.log('addObject', addObject, event)\n                const response = await AddEvent(addObject)\n                if (response.ok) {\n                    setToastMessage([\n                        { title: 'Congrats!', description: 'The ' + event.title + ' event has been successfuly created', type: 'success' }\n                    ])\n                }\n                else {\n                    setToastMessage([\n                        { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n                    ])\n                }\n            }\n            setaddingLoader(false)\n        }\n        await UploadMedia(mediaFile, setToastMessage, addEventCallback)\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'Add new event'}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"event\" onSubmit={handleAdd}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"title\">Event Title</CLabel>\n                                    <CInput type=\"text\" id=\"title\" required placeholder=\"Enter title...\" onInput={(ev) => setEvent({ ...event, title: ev.target.value })} autoComplete=\"name\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"date\">Event Date</CLabel>\n                                        <CInput type=\"date\" min={new Date().toISOString().split('T')[0]} id=\"date\" required placeholder=\"Enter date...\" onChange={(ev) => setEvent({ ...event, date: ev.target.value })} />\n                                    </CCol>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"startTime\">Start Time</CLabel>\n                                        <CInput type=\"time\" id=\"startTime\" required placeholder=\"Enter start time...\" onChange={(ev) => setEvent({ ...event, startTime: ev.target.value })} />\n                                    </CCol>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"endTime\">End Time</CLabel>\n                                        <CInput type=\"time\" id=\"endTime\" placeholder=\"Enter end time...\" onChange={(ev) => setEvent({ ...event, endTime: ev.target.value })} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CLabel col md=\"1\" htmlFor=\"file-input\">Image/Video</CLabel>\n                                    <CCol xs=\"12\" md=\"9\" className=\"ml-n3 mt-1\">\n                                        <CInputFile id=\"file-input\" name=\"file-input\" onChange={(ev) => setMediaFile(ev.target.files[0])} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol xs=\"12\" sm=\"3\">\n                                        <CLabel htmlFor=\"select\">Category</CLabel>\n                                        <CSelect custom name=\"category\" id=\"category\" required onChange={(ev) => { setEvent({ ...event, category: ev.target.value }) }}>\n                                            {categories.filter(category => category.type === 'general').map(category => {\n                                                return <option key={category._id} value={category._id}>{category.name}</option>\n                                            })}\n                                        </CSelect>\n                                    </CCol>\n                                    <CCol xs=\"12\" sm=\"3\">\n                                        <CLabel htmlFor=\"price\">Price</CLabel>\n                                        <CInput type=\"number\" id=\"price\" required placeholder=\"Enter price...\" onInput={(ev) => setEvent({ ...event, price: ev.target.value })} autoComplete=\"price\" />\n                                    </CCol>\n                                    <CCol xs=\"12\" sm=\"3\">\n                                        <CLabel htmlFor=\"host\">Host</CLabel>\n                                        <CInput type=\"text\" id=\"host\" required placeholder=\"Enter the host...\" onInput={(ev) => setEvent({ ...event, host: ev.target.value })} autoComplete=\"host\" />\n                                    </CCol>\n                                    <CCol xs=\"12\" sm=\"3\">\n                                        <CLabel htmlFor=\"location\">Location</CLabel>\n                                        <CInput type=\"text\" id=\"location\" required placeholder=\"Enter the location...\" onInput={(ev) => setEvent({ ...event, location: ev.target.value })} autoComplete=\"location\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"2\" className=\"col-form-label\">\n                                        I want to publish this event:\n                                    </CCol>\n                                    <CCol sm=\"1\">\n                                        <CSwitch\n                                            onChange={(ev) => setEvent({ ...event, isPublic: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                            defaultChecked\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\n                                    <Editor\n                                        apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                        initialValue=\"\"\n                                        init={{\n                                            height: 500,\n                                            menubar: false,\n                                            plugins: [\n                                                'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                                'searchreplace wordcount visualblocks visualchars code',\n                                                'insertdatetime media nonbreaking table directionality',\n                                                'emoticons template paste textpattern imagetools codesample'\n                                            ],\n                                            toolbar: 'bold italic sizeselect fontselect fontsizeselect | hr alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | insertfile undo redo | forecolor backcolor emoticons | ',\n                                        }}\n                                        onEditorChange={(content, editor) => {\n                                            setEvent({ ...event, description: content })\n                                        }}\n                                    />\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Add Event</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {addingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default EventsAdd\n"],"sourceRoot":""}