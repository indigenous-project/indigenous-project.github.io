{"version":3,"sources":["views/discussions/DiscussionsEdit.js","views/discussions/DiscussionsDetail.js","views/discussions/DiscussionsList.js","server/CategoriesManagement.js","server/MediasManagement.js","server/DiscussionsManagement.js","server/RepliesManagement.js","views/discussions/RepliesList.js"],"names":["DiscussionsEdit","discussion","setDiscussion","setToastMessage","loadDiscussionsList","toastMessages","useState","categories","setCategories","editingLoader","setEditingLoader","mediaFile","setMediaFile","handleEdit","ev","a","preventDefault","editDiscussionCallback","mediaId","editObject","title","description","category","_id","isPublic","toString","medias","console","log","EditDiscussion","ok","type","UploadMedia","loadCategories","CallCategoriesList","response","json","Categories","data","useEffect","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","col","md","xs","name","onChange","files","custom","filter","map","tag","checked","color","rows","size","DiscussionsDetail","replies","length","owner","email","createdAt","replace","updatedAt","style","maxHeight","maxWidth","marginTop","src","path","generateIcon","iconName","content","freeSet","DiscussionsList","Discussions","setDiscussions","show","modalInfo","setModalInfo","tempDiscussions","setTempDiscussions","searchString","setSearchString","loading","setLoading","CallDiscussionsList","handleSearch","keyword","toLowerCase","temp","Discussion","includes","sort","b","reverse","handleDelete","CallDiscussionsEdit","isDeleted","handleIsPublic","columns","selector","sortable","left","cell","center","split","onClick","highlightOnHover","pagination","progressPending","onClosed","closeButton","RepliesList","toastMessage","position","autohide","fade","Math","floor","random","bearerToken","localStorage","getItem","CategoriesList","fetch","GetUrl","mode","headers","Authorization","Accept","catch","error","message","CategoriesEdit","body","JSON","stringify","then","CategoriesDelete","CategoriesAdd","addObject","BUCKET_NAME","s3","AWS","S3","accessKeyId","secretAccessKey","MediasAdd","fileContent","callback","params","Bucket","Key","Body","ContentType","ACL","upload","err","extension","Location","jsonResult","UploadManyMedias","fileContents","promises","forEach","push","promise","Promise","all","pr","results","mediaIds","i","DiscussionsAdd","RepliesEdit","tempReplies","setTempReplies","loadRepliesList","Reply","text","firstName","lastName","CallRepliesEdit","item","find"],"mappings":"sQA0HeA,EAlHS,SAAC,GAAwF,IAAtFC,EAAqF,EAArFA,WAAYC,EAAyE,EAAzEA,cAAeC,EAA0D,EAA1DA,gBAAgCC,GAA0B,EAAzCC,cAAyC,EAA1BD,qBAA0B,EACxEE,mBAAS,IAD+D,mBACrGC,EADqG,KACzFC,EADyF,OAElEF,oBAAS,GAFyD,mBAErGG,EAFqG,KAEtFC,EAFsF,OAG1EJ,qBAH0E,mBAGrGK,EAHqG,KAG1FC,EAH0F,KAItGC,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACfD,EAAGE,iBACHN,GAAiB,GACXO,EAHS,+BAAAF,EAAA,MAGgB,WAAgBG,GAAhB,eAAAH,EAAA,0DACV,IAAbG,EADuB,uBAEnBC,EAAa,CACbC,MAAOnB,EAAWmB,MAClBC,YAAapB,EAAWoB,YACxBC,SAAUrB,EAAWqB,SAAWrB,EAAWqB,SAAWf,EAAW,GAAGgB,IACpEC,SAAUvB,EAAWuB,SAASC,aAEjB,IAAbP,IACAC,EAAWO,OAAS,CAACR,IAEzBS,QAAQC,IAAIT,GAXW,SAYAU,YAAe5B,EAAWsB,IAAKJ,EAAYhB,GAZ3C,cAaV2B,IACT1B,IACAD,EAAgB,CACZ,CAAEiB,MAAO,YAAaC,YAAa,0CAA4CpB,EAAWsB,IAAM,gCAAiCQ,KAAM,cAI3I5B,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,YArBxE,OAyB3BrB,GAAiB,GAzBU,2CAHhB,uDA8BXC,EA9BW,gCA+BLqB,YAAYrB,EAAWR,EAAiBc,GA/BnC,6BAiCXA,GAAwB,GAjCb,2CAAH,sDAmCVgB,EAAc,uCAAG,8BAAAlB,EAAA,sEACImB,cADJ,cACbC,EADa,gBAEOA,EAASC,OAFhB,OAEbC,EAFa,OAEwBC,KAC3C9B,EAAc6B,GAHK,2CAAH,qDAQpB,OAHAE,qBAAU,WACNN,MACD,IAEC,qCACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,eAAC,IAAD,CAAMO,GAAG,KAAT,UACI,oBAAIC,GAAG,UAAUC,UAAU,kBAA3B,SAA8C,OAASzC,EAAWsB,MAClE,qBAAKmB,UAAU,mBAAf,UAAmC,IAAIC,MAAOC,0BAK9D,cAAC,IAAD,CAAOC,OAAO,GAAGC,OAAO,aAAaC,SAAUlC,EAA/C,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAM2B,GAAG,KAAT,SACI,eAAC,IAAD,WACI,eAAC,IAAD,WACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQQ,QAAQ,QAAhB,8BACA,cAAC,IAAD,CAAQjB,KAAK,OAAOU,GAAG,QAAQQ,UAAQ,EAACC,YAAY,iBAAiBC,QAAS,SAACrC,GAAD,OAAQZ,EAAc,2BAAKD,GAAN,IAAkBmB,MAAON,EAAGsC,OAAOC,UAAUC,aAAa,OAAOD,MAAOpD,EAAWmB,WAE1L,eAAC,IAAD,CAAYmC,KAAG,EAAf,UACI,cAAC,IAAD,CAAQC,KAAG,EAACC,GAAG,IAAIT,QAAQ,aAA3B,yBACA,cAAC,IAAD,CAAMU,GAAG,KAAKD,GAAG,IAAIf,UAAU,aAA/B,SACI,cAAC,IAAD,CAAYD,GAAG,aAAakB,KAAK,aAAaC,SAAU,SAAC9C,GAAD,OAAQF,EAAaE,EAAGsC,OAAOS,MAAM,YAGrG,cAAC,IAAD,CAAYN,KAAG,EAAf,SACI,eAAC,IAAD,CAAMG,GAAG,KAAKlB,GAAG,IAAjB,UACI,cAAC,IAAD,CAAQQ,QAAQ,SAAhB,sBACA,cAAC,IAAD,CAASc,QAAM,EAACH,KAAK,WAAWlB,GAAG,WAAWQ,UAAQ,EAACW,SAAU,SAAC9C,GAASZ,EAAc,2BAAKD,GAAN,IAAkBqB,SAAUR,EAAGsC,OAAOC,UAAYA,MAAOpD,EAAWqB,SAAWrB,EAAWqB,SAASC,IAAMhB,EAAW,GAAKA,EAAW,GAAGgB,IAAM,GAArO,SACKhB,EAAWwD,QAAO,SAAAzC,GAAQ,MAAsB,YAAlBA,EAASS,QAAoBiC,KAAI,SAAA1C,GAC5D,OAAO,wBAA2B+B,MAAO/B,EAASC,IAA3C,SAAiDD,EAASqC,MAA7CrC,EAASC,eAK7C,eAAC,IAAD,CAAYgC,KAAG,EAAf,UACI,cAAC,IAAD,CAAMU,IAAI,QAAQzB,GAAG,IAAIE,UAAU,iBAAnC,gDAGA,cAAC,IAAD,CAAMF,GAAG,IAAIE,UAAU,QAAvB,SACI,cAAC,KAAD,CACIkB,SAAU,SAAC9C,GAAD,OAAQZ,EAAc,2BAAKD,GAAN,IAAkBuB,SAAUV,EAAGsC,OAAOc,YACrExB,UAAU,aACVyB,MAAM,OACND,UAASjE,EAAWuB,gBAIhC,eAAC,IAAD,WACI,cAAC,IAAD,CAAQwB,QAAQ,iBAAhB,yBACA,cAAC,KAAD,CAAWoB,KAAK,IAAIT,KAAK,cAAclB,GAAG,cAAcU,QAAS,SAACrC,GAAD,OAAQZ,EAAc,2BAAKD,GAAN,IAAkBoB,YAAaP,EAAGsC,OAAOC,UAAUA,MAAOpD,EAAWoB,oBAGnK,eAAC,IAAD,CAAaqB,UAAU,SAAvB,UACI,cAAC,IAAD,CAASX,KAAK,SAASsC,KAAK,KAAK3B,UAAU,eAA3C,6BADJ,IACwF,cAAC,IAAD,CAAO2B,KAAK,KAAK3B,UAAU,sBAA3B,oBACnFjC,EAAgB,qBAAKiC,UAAU,OAAf,SAAsB,cAAC,KAAD,CAAUA,UAAU,WAAkB,qBClE9F4B,G,gBAxCW,SAAC,GAAoB,IAAlBrE,EAAiB,EAAjBA,WAEzB,OADA0B,QAAQC,IAAI,eAAgB3B,GAExB,qCACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,eAAC,IAAD,CAAMuC,GAAG,KAAT,UACI,qBAAIC,GAAG,UAAUC,UAAU,kBAA3B,iBAAkDzC,EAAWsB,OAC7D,qBAAKmB,UAAU,mBAAf,UAAmC,IAAIC,MAAOC,0BAK7D3C,EAAa,eAAC,IAAD,WACV,cAAC,IAAD,CAAMuC,GAAIvC,EAAWyB,OAAO,GAAK,IAAM,KAAvC,SACI,eAAC,IAAD,WACI,eAAC,IAAD,WAAgB,6CAAyBzB,EAAWmB,SACpD,eAAC,IAAD,WAAgB,gDAA4BnB,EAAWsE,QAAQC,UAC/D,eAAC,IAAD,WAAgB,6CAAyBvE,EAAWwE,MAAQxE,EAAWwE,MAAMC,MAAQ,mBACrF,eAAC,IAAD,WAAgB,gDAA4BzE,EAAWqB,SAAWrB,EAAWqB,SAASqC,KAAO,mBAC7F,eAAC,IAAD,WAAgB,4EAAuD,cAAC,IAAD,CAAQQ,MAAOlE,EAAWuB,SAAW,UAAY,SAAUkB,UAAU,WAArE,SAAiFzC,EAAWuB,SAAW,MAAQ,UACtL,eAAC,IAAD,WAAgB,kDAA8BvB,EAAW0E,UAAY1E,EAAW0E,UAAUC,QAAQ,IAAK,KAAKA,QAAQ,IAAK,IAAM,MAC/H,eAAC,IAAD,WAAgB,sDAAkC3E,EAAW4E,UAAY5E,EAAW4E,UAAUD,QAAQ,IAAK,KAAKA,QAAQ,IAAK,IAAM,WAG3I,cAAC,IAAD,CAAMpC,GAAG,IAAT,SACKvC,EAAWyB,OAAO,GAAK,cAAC,IAAD,CAAMoD,MAAO,CAAEC,UAAW,QAASC,SAAU,OAAQC,UAAW,QAAUC,IAAKjF,EAAWyB,OAAO,GAAGyD,OAAW,UAErI,KACV,eAAC,IAAD,CAAOzC,UAAU,OAAjB,UACI,cAAC,IAAD,2BAGA,mBAAGA,UAAU,YAAb,SAA0BzC,EAAWoB,sB,SC7B/C+D,EAAe,SAAUC,GAC3B,OAAQ,cAAC,IAAD,CAAOC,QAASC,IAAQF,MAuMrBG,UApMS,WAAO,IAAD,EACYlF,mBAAS,IADrB,mBACnBmF,EADmB,KACNC,EADM,OAEQpF,mBAAS,CAAEqF,MAAM,IAFzB,mBAEnBC,EAFmB,KAERC,EAFQ,OAGoBvF,mBAAS,IAH7B,mBAGnBwF,EAHmB,KAGFC,EAHE,OAIczF,mBAAS,IAJvB,mBAInB0F,EAJmB,KAILC,EAJK,OAKI3F,oBAAS,GALb,mBAKnB4F,EALmB,KAKVC,EALU,OAMe7F,mBAAS,IANxB,mBAMnBD,EANmB,KAMJF,EANI,KAOpBC,EAAmB,uCAAG,8BAAAW,EAAA,6DACxBoF,GAAW,GADa,SAEDC,cAFC,cAElBjE,EAFkB,gBAGOA,EAASC,OAHhB,OAGlBoD,EAHkB,OAGwBlD,KAChDX,QAAQC,IAAI4D,GACZE,EAAeF,GACfa,EAAaL,EAAcR,GAC3BW,GAAW,GAPa,4CAAH,qDASnBE,EAAe,SAACC,EAASd,GAC3Bc,EAAUA,EAAQC,cAClB,IACMC,GADmBhB,GAAoCC,GAC/B1B,QAAO,SAAA0C,GACjC,OAAOA,EAAWrF,MAAMmF,cAAcG,SAASJ,IAAYG,EAAWhC,MAAMC,MAAM6B,cAAcG,SAASJ,IAAYG,EAAW9B,UAAUlD,WAAWiF,SAASJ,MAC/JK,MAAK,SAAU5F,EAAG6F,GAAK,OAAO7F,EAAE4D,UAAYiC,EAAEjC,aAAakC,UAC9Dd,EAAmBS,GACnBP,EAAgBK,IAEdQ,EAAY,uCAAG,WAAOrE,GAAP,eAAA1B,EAAA,sEACMgG,YAAoBtE,EAAI,CAAEuE,UAAW,QAAU7G,GADrD,YACXgC,EADW,QAEJL,GAFI,uBAGb3B,EAAgB,CACZ,CAAEiB,MAAO,YAAaC,YAAa,2BAA6BoB,EAAK,gCAAiCV,KAAM,aAJnG,SAMP3B,IANO,8BASbD,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,YAV9E,QAajBJ,QAAQC,IAAIO,GACZ0D,EAAa,CAAEF,MAAM,EAAO5D,KAAM,WAdjB,4CAAH,sDAiBZkF,EAAc,uCAAG,WAAOxE,GAAP,eAAA1B,EAAA,sEACIgG,YAAoBtE,EAAI,CAAEjB,UAAWoE,EAAUpE,SAAW,IAAMrB,GADpE,YACbgC,EADa,QAENL,GAFM,uBAGf3B,EAAgB,CACZ,CAAEiB,MAAO,YAAaC,YAAa,+CAAiDoB,EAAK,gCAAiCV,KAAM,aAJrH,SAMT3B,IANS,8BASfD,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,YAV5E,QAanBJ,QAAQC,IAAIO,GACZ0D,EAAa,CAAEF,MAAM,IAdF,4CAAH,sDAgBpBpD,qBAAU,WACNnC,MACD,IACH,IAAM8G,EAAU,CACZ,CACIvD,KAAM,2CACNwD,SAAU,QACVC,UAAU,EACVC,MAAM,GAEV,CACI1D,KAAM,8CACNwD,SAAU,WACVC,UAAU,EACVC,MAAM,EACNC,KAAM,SAAA/D,GAAG,OAAIA,EAAIjC,SAAWiC,EAAIjC,SAASqC,KAAO,kBAEpD,CACIA,KAAM,+CACNwD,SAAU,OACVC,UAAU,EACVG,QAAQ,EACRD,KAAM,SAAA/D,GAAG,OAAIA,EAAIoB,UAAU6C,MAAM,KAAK,KAE1C,CACI7D,KAAM,4CACNwD,SAAU,cACVC,UAAU,EACVG,QAAQ,GAEZ,CACI5D,KAAM,gDACNwD,SAAU,WACVC,UAAU,EACVG,QAAQ,EACRD,KAAM,SAAA/D,GAAG,OAAI,cAAC,IAAD,CAAQY,MAAOZ,EAAI/B,SAAW,UAAY,SAAUkB,UAAU,cAA9D,SAA6Ea,EAAI/B,SAAW,MAAQ,SAErH,CACImC,KAAM,GACNwD,SAAU,MACVG,KAAM,SAAA/D,GAAG,OACL,gCACI,cAAC,IAAD,CAAOb,UAAU,qBAAqB+E,QAAS,kBAAM5B,EAAa,2BAAKtC,GAAN,IAAWoC,MAAOC,EAAUD,KAAM5D,KAAM,aAAzG,SACKqD,EAAa,aAElB,cAAC,IAAD,CAAO1C,UAAU,qBAAqB+E,QAAS,kBAAM5B,EAAa,2BAAKtC,GAAN,IAAWoC,MAAOC,EAAUD,KAAM5D,KAAM,WAAzG,SACKqD,EAAa,eAElB,cAAC,IAAD,CAAO1C,UAAU,qBAAqB+E,QAAS,kBAAM5B,EAAa,CAAEpD,GAAIc,EAAIhC,IAAKH,MAAOmC,EAAInC,MAAOI,SAAU+B,EAAI/B,SAAUmE,MAAOC,EAAUD,KAAM5D,KAAM,cAAxJ,SACKqD,EAAa,oBAElB,cAAC,IAAD,CAAO1C,UAAU,qBAAqB+E,QAAS,kBAAM5B,EAAa,CAAEpD,GAAIc,EAAIhC,IAAKH,MAAOmC,EAAInC,MAAOuE,MAAOC,EAAUD,KAAM5D,KAAM,YAAhI,SACKqD,EAAa,cAElB,cAAC,IAAD,CAAO1C,UAAU,qBAAqB+E,QAAS,kBAAM5B,EAAa,CAAEpD,GAAIc,EAAIhC,IAAKgD,QAAShB,EAAIgB,QAASoB,MAAOC,EAAUD,KAAM5D,KAAM,aAApI,SACKqD,EAAa,4BAMlC,OACI,qCACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAM5C,GAAG,QAIb,cAAC,IAAD,UACI,eAAC,IAAD,CAAMA,GAAG,KAAT,UACI,cAAC,IAAD,CAAQT,KAAK,OAAOU,GAAG,aAAaS,YAAY,wBAAwBC,QAAS,SAACrC,GAAD,OAAQuF,EAAavF,EAAGsC,OAAOC,UAChH,cAAC,IAAD,CACIjC,MAAM,mBACN8F,QAASA,EACT5E,KAAMwD,EACN4B,kBAAkB,EAClBC,YAAY,EACZC,gBAAiB1B,cAMrC,eAAC,IAAD,CACIP,KAAMC,EAAUD,KAChBkC,SAAU,WACNhC,EAAa,CAAEF,MAAM,EAAO5D,KAAM6D,EAAU7D,QAGhDoC,MAA0B,WAAnByB,EAAU7D,KAAoB,SAA8B,aAAnB6D,EAAU7D,KAAsB,UAAY,OAC5FsC,KAA0B,SAAnBuB,EAAU7D,MAAsC,WAAnB6D,EAAU7D,MAAwC,YAAnB6D,EAAU7D,KAAsB,KAAO,GAP9G,UASI,cAAC,IAAD,CAAc+F,aAAW,EAAzB,SACI,cAAC,IAAD,UAAiC,WAAnBlC,EAAU7D,KAAoB,4BAAiD,SAAnB6D,EAAU7D,KAAkB,0BAA+C,WAAnB6D,EAAU7D,KAAoB,oBAAsB,8BAEzL6D,EAAUD,KAAO,eAAC,IAAD,WACM,WAAnBC,EAAU7D,KAAoB,mEAAqC,iCAAS6D,EAAUxE,QAAxD,OAAoG,aAAnBwE,EAAU7D,KAAsB,uFAAyD,iCAAS6D,EAAUxE,QAA5E,OAAqG,KACjO,SAAnBwE,EAAU7D,KAAkB,cAAC,EAAD,CAAiB3B,oBAAqBA,EAAqBH,WAAY2F,EAAW1F,cAAe2F,EAAc1F,gBAAiBA,EAAiBE,cAAeA,IAAuC,WAAnBuF,EAAU7D,KAAoB,cAAC,EAAD,CAAmB9B,WAAY2F,IAAmC,YAAnBA,EAAU7D,KAAqB,cAACgG,EAAA,QAAD,CAAa9H,WAAY2F,EAAWzF,gBAAiBA,EAAiBC,oBAAqBA,IAA0B,QACta,KACI,WAAnBwF,EAAU7D,MAAwC,aAAnB6D,EAAU7D,KAAsB,eAAC,IAAD,WAC5D,cAAC,IAAD,CAASoC,MAA0B,WAAnByB,EAAU7D,KAAoB,SAAW,UAAW0F,QAAS,iBAAyB,WAAnB7B,EAAU7D,KAAoB+E,EAAalB,EAAUnD,IAAMwE,EAAerB,EAAUnD,KAAvK,iBACA,cAAC,IAAD,CACI0B,MAAM,YACNsD,QAAS,kBAAM5B,EAAa,CAAEF,MAAM,KAFxC,uBAIc,QAErBtF,EAAc2D,KAAI,SAAAgE,GAEf,OADArG,QAAQC,IAAIoG,GACL,cAAC,KAAD,CACHC,SAAU,eADP,SAKC,eAAC,KAAD,CAEItC,MAAM,EACNuC,SAAU,IACVC,MAAM,EACNhE,MAAO6D,EAAajG,KALxB,UAOI,cAAC,KAAD,CAAc+F,aAAa,EAA3B,SACKE,EAAa5G,QAElB,cAAC,KAAD,UACK4G,EAAa3G,gBAVb+G,KAAKC,MAAsB,IAAhBD,KAAKE,YAJxB,UAAYF,KAAKC,MAAsB,IAAhBD,KAAKE,mB,iNCtLjDC,EAAc,UAAYC,aAAaC,QAAQ,aAG7CC,EAAc,uCAAG,sBAAA3H,EAAA,sEACN4H,MAAMC,YAAO,kBAAmB,CACzC9F,OAAQ,MACR+F,KAAM,OACNC,QAAS,CACLC,cAAeR,EACfS,OAAQ,sBAEbC,OAAM,SAAAC,GACLvH,QAAQC,IAAIsH,EAAMC,YATH,mFAAH,qDAcdC,EAAc,uCAAG,WAAgB3G,EAAItB,EAAYhB,GAAhC,SAAAY,EAAA,+EACZ4H,MAAMC,YAAO,kBAAoB,IAAMnG,EAAI,CAC9CK,OAAQ,QACR+F,KAAM,OACNC,QAAS,CACL,eAAgB,mBAChBC,cAAeR,EACfS,OAAQ,oBAEZK,KAAMC,KAAKC,UAAUpI,KAEpBqI,MAAK,SAAArH,GACF,OAAOA,KAEV8G,OAAM,SAAAC,GACHvH,QAAQC,IAAIsH,GACZ/I,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,gBAjBhF,2CAAH,0DAsBd0H,EAAgB,uCAAG,WAAgBhH,EAAItC,GAApB,SAAAY,EAAA,+EACd4H,MAAMC,YAAO,oBAAsB,IAAMnG,EAAI,CAChDK,OAAQ,SACR+F,KAAM,OACNC,QAAS,CACL,eAAgB,mBAChBC,cAAeR,EACfS,OAAQ,sBAGXQ,MAAK,SAAArH,GACF,OAAOA,KAEV8G,OAAM,SAAAC,GACHvH,QAAQC,IAAIsH,GACZ/I,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,gBAhB9E,2CAAH,wDAsBhB2H,EAAa,uCAAG,WAAgBC,EAAWxJ,GAA3B,SAAAY,EAAA,+EACX4H,MAAMC,YAAO,iBAAkB,CAClC9F,OAAQ,OACR+F,KAAM,OACNC,QAAS,CACL,eAAgB,mBAChBC,cAAeR,EACfS,OAAQ,oBAEZK,KAAMC,KAAKC,UAAUI,KAEpBH,MAAK,SAAArH,GACF,OAAOA,KAEV8G,OAAM,SAAAC,GACHvH,QAAQC,IAAIsH,GACZ/I,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,gBAjBjF,2CAAH,yD,sJC5Db6H,EAAc,oBACdC,EAAK,I,OAAIC,EAAIC,IAAG,CAClBC,YAJO,uBAKPC,gBAJW,6CAMX1B,EAAc,UAAYC,aAAaC,QAAQ,aAE7CyB,EAAS,uCAAG,WAAgBP,EAAWxJ,GAA3B,SAAAY,EAAA,+EACP4H,MAAMC,YAAO,aAAc,CAC9B9F,OAAQ,OACRgG,QAAS,CACL,eAAgB,mBAChB,cAAiBP,EACjB,OAAU,oBAEdc,KAAMC,KAAKC,UAAUI,KAEpBH,MAAK,SAAArH,GACF,OAAOA,KAEV8G,OAAM,SAAAC,GACHvH,QAAQC,IAAIsH,GACZ/I,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,gBAhBrF,2CAAH,wDAqBTC,EAAW,uCAAG,WAAgBmI,EAAahK,EAAiBiK,GAA9C,eAAArJ,EAAA,sDACVsJ,EAAS,CACXC,OAAQV,EACRW,IAAKnC,KAAKC,MAAsB,KAAhBD,KAAKE,UAAwB7G,WAC7C+I,KAAML,EACNM,YAAa,aACbC,IAAK,qBAGTb,EAAGc,OAAON,EAAV,uCAAkB,WAAgBO,EAAKtI,GAArB,iBAAAvB,EAAA,6DACV6J,GACAzK,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,kDAAoDuJ,EAAK7I,KAAM,YAGvGJ,QAAQC,IAAR,8BAA2CU,GAN7B,SAOO4H,EAAU,CAAEnI,KAAM,QAAS8I,UAAW,IAAMV,EAAYxG,KAAK6D,MAAM,KAAK,GAAIrC,KAAM7C,EAAKwI,UAAY3K,GAP1G,YAOVgC,EAPU,QAQDL,GARC,iCASaK,EAASC,OATtB,cASN2I,EATM,iBAUJX,EAASW,EAAWzI,KAAKf,KAVrB,iDAaJ6I,GAAU,GAbN,QAcVjK,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,kDAAoDuJ,EAAK7I,KAAM,YAfzF,4CAAlB,yDATgB,2CAAH,0DA8BXiJ,EAAgB,uCAAG,WAAgBC,EAAc9K,EAAiBiK,GAA/C,eAAArJ,EAAA,sDACjBmK,EAAW,GACfD,EAAaE,SAAQ,SAAAhB,GACjB,IAAME,EAAS,CACXC,OAAQV,EACRW,IAAKnC,KAAKC,MAAsB,KAAhBD,KAAKE,UAAwB7G,WAC7C+I,KAAML,EAAY7E,QAClBmF,YAAa,aACbC,IAAK,qBAETQ,EAASE,KAAK,CAAErJ,KAAMoI,EAAYpI,KAAMsJ,QAASxB,EAAGc,OAAON,GAAQgB,eAEvEC,QAAQC,IAAIL,EAASlH,KAAI,SAAAwH,GAAE,OAAIA,EAAGH,YAAU7B,KAA5C,uCAAiD,WAAgBiC,GAAhB,qBAAA1K,EAAA,sDACzC2K,EAAW,GACNC,EAAI,EAFgC,YAE7BA,EAAIF,EAAQjH,QAFiB,oBAGzC7C,QAAQC,IAAR,8BAA2C6J,EAAQE,IACtB,SAAzBV,EAAaU,GAAG5J,KAJqB,iCAKhBmI,EAAU,CAAEnI,KAAM,QAAS8I,UAAW,OAAQ1F,KAAMsG,EAAQE,GAAGb,UAAY3K,GAL3D,YAKjCgC,EALiC,QAMxBL,GANwB,kCAOVK,EAASC,OAPC,QAO7B2I,EAP6B,OAQjCW,EAASN,KAAKL,EAAWzI,KAAKf,KARG,+BAWjCpB,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,YAZ1D,mDAkBrC2J,EAASN,KAAKK,EAAQE,GAAGb,UAlBY,QAETa,IAFS,wCAoBvCvB,EAASsB,GApB8B,4CAAjD,uDAZqB,2CAAH,2D,mMC9DlBnD,EAAc,UAAYC,aAAaC,QAAQ,aAE7CmD,EAAc,uCAAG,WAAgBjC,EAAWxJ,GAA3B,SAAAY,EAAA,+EACZ4H,MAAMC,YAAO,kBAAmB,CACnC9F,OAAQ,OACRgG,QAAS,CACL,eAAgB,mBAChB,cAAiBP,EACjB,OAAU,oBAEdc,KAAMC,KAAKC,UAAUI,KAEpBH,MAAK,SAAArH,GACF,OAAOA,KAEV8G,OAAM,SAAAC,GACHvH,QAAQC,IAAIsH,GACZ/I,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,gBAhBhF,2CAAH,wDAoBdyD,EAAe,uCAAG,sBAAAzE,EAAA,sEACP4H,MAAMC,YAAO,mBAAoB,CAC1C9F,OAAQ,MACR+F,KAAM,OACNC,QAAS,CACL,cAAiBP,EACjB,OAAU,sBAGbU,OAAM,SAAAC,GACHvH,QAAQC,IAAIsH,EAAMC,YAVN,mFAAH,qDA4BfnJ,EAAe,uCAAG,WAAgByC,EAAItB,EAAYhB,GAAhC,SAAAY,EAAA,+EACb4H,MAAMC,YAAO,mBAAqB,IAAMnG,EAAI,CAC/CK,OAAQ,QACR+F,KAAM,OACNC,QAAS,CACL,eAAgB,mBAChB,cAAiBP,EACjB,OAAU,oBAEdc,KAAMC,KAAKC,UAAUpI,KAEpBqI,MAAK,SAAArH,GACF,OAAOA,KAEV8G,OAAM,SAAAC,GACHvH,QAAQC,IAAIsH,GACZ/I,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,gBAjB/E,2CAAH,2D,yGClDjBwG,EAAc,UAAYC,aAAaC,QAAQ,aAuB7CoD,EAAW,uCAAG,WAAgBpJ,EAAItB,EAAYhB,GAAhC,SAAAY,EAAA,+EACT4H,MAAMC,YAAO,eAAiB,IAAMnG,EAAI,CAC3CK,OAAQ,QACR+F,KAAM,OACNC,QAAS,CACL,eAAgB,mBAChB,cAAiBP,EACjB,OAAU,oBAEdc,KAAMC,KAAKC,UAAUpI,KAEpBqI,MAAK,SAAArH,GACF,OAAOA,KAEV8G,OAAM,SAAAC,GACHvH,QAAQC,IAAIsH,GACZ/I,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,gBAjBnF,2CAAH,0D,6CChBXqD,EAAe,SAAUC,GAC3B,OAAQ,cAAC,IAAD,CAAOC,QAASC,IAAQF,MAwKrB0C,UArKK,SAAC,GAA0D,IAAxD9H,EAAuD,EAAvDA,WAAYE,EAA2C,EAA3CA,gBAAiBC,EAA0B,EAA1BA,oBAA0B,EACxCE,mBAAS,CAAEqF,MAAM,IADuB,mBACnEC,EADmE,KACxDC,EADwD,OAEpCvF,mBAAS,IAF2B,mBAEnEwL,EAFmE,KAEtDC,EAFsD,OAGlCzL,mBAAS,IAHyB,mBAGnE0F,EAHmE,KAGrDC,EAHqD,OAI5C3F,oBAAS,GAJmC,mBAInE4F,EAJmE,KAI1DC,EAJ0D,KAKpE6F,EAAe,uCAAG,4BAAAjL,EAAA,sDACpBoF,GAAW,GACL4B,EAAc9H,EAAWsE,QAC/B8B,EAAaL,EAAc+B,GAC3B5B,GAAW,GAJS,2CAAH,qDAMfE,EAAe,SAACC,EAASyB,GAC3BzB,EAAUA,EAAQC,cAClB,IACMC,GADeuB,GAA4B9H,EAAWsE,SAClCR,QAAO,SAAAkI,GAC7B,OAAOA,EAAMC,KAAK3F,cAAcG,SAASJ,IAAY2F,EAAMxH,MAAM0H,UAAU5F,cAAcG,SAASJ,IAAY2F,EAAMxH,MAAM2H,SAAS7F,cAAcG,SAASJ,IAAY2F,EAAMtH,UAAUlD,WAAWiF,SAASJ,MAC3MK,MAAK,SAAU5F,EAAG6F,GAAK,OAAO7F,EAAE4D,UAAYiC,EAAEjC,aAAakC,UAC9DkF,EAAevF,GACfP,EAAgBK,IAEdQ,EAAY,uCAAG,WAAOrE,GAAP,eAAA1B,EAAA,sEACMsL,EAAgB5J,EAAI,CAAEuE,UAAW,QAAU7G,GADjD,YACXgC,EADW,QAEJL,GAFI,wBAGb3B,EAAgB,CACZ,CAAEiB,MAAO,YAAaC,YAAa,sBAAwBoB,EAAK,gCAAiCV,KAAM,aAE3G9B,EAAWsE,QAAUtE,EAAWsE,QAAQR,QAAO,SAAUuI,GACrD,OAAOA,EAAK/K,MAAQkB,KAPX,SASPuJ,IATO,OAUb5L,IAVa,wBAabD,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,YAd9E,QAiBjBJ,QAAQC,IAAIO,GACZ0D,EAAa,CAAEF,MAAM,EAAO5D,KAAM,WAlBjB,4CAAH,sDAqBZkF,EAAc,uCAAG,WAAOxE,GAAP,eAAA1B,EAAA,sEACIsL,EAAgB5J,EAAI,CAAEjB,UAAWoE,EAAUpE,SAAW,IAAMrB,GADhE,YACbgC,EADa,QAENL,GAFM,wBAGf3B,EAAgB,CACZ,CAAEiB,MAAO,YAAaC,YAAa,0CAA4CoB,EAAK,gCAAiCV,KAAM,aAErH9B,EAAWsE,QAAQgI,MAAK,SAAUD,GACxC,OAAOA,EAAK/K,MAAQkB,KAEpBjB,UAAYoE,EAAUpE,SATX,SAUTwK,IAVS,OAWf5L,IAXe,wBAcfD,EAAgB,CACZ,CAAEiB,MAAO,SAAUC,YAAa,gDAAiDU,KAAM,YAf5E,QAkBnBJ,QAAQC,IAAIO,GACZ0D,EAAa,CAAEF,MAAM,IAnBF,4CAAH,sDAqBpBpD,qBAAU,WACNyJ,MACD,IACH,IAAM9E,EAAU,CACZ,CACIvD,KAAM,0CACNwD,SAAU,OACVC,UAAU,EACVC,MAAM,GAEV,CACI1D,KAAM,8CACNwD,SAAU,WACVC,UAAU,EACVC,MAAM,EACNC,KAAM,SAAA/D,GAAG,OAAIA,EAAIjC,SAAWiC,EAAIjC,SAASqC,KAAO,kBAEpD,CACIA,KAAM,gDACNwD,SAAU,OACVC,UAAU,EACVG,QAAQ,EACRD,KAAM,SAAA/D,GAAG,OAAIA,EAAIoB,UAAU6C,MAAM,KAAK,KAE1C,CACI7D,KAAM,4CACNwD,SAAU,QACVC,UAAU,EACVG,QAAQ,EACRD,KAAM,SAAA/D,GAAG,OAAKA,EAAIkB,MAAM0H,UAAY5I,EAAIkB,MAAM0H,UAAY,IAAM,KAAO5I,EAAIkB,MAAM2H,SAAW7I,EAAIkB,MAAM2H,SAAW,MAErH,CACIzI,KAAM,gDACNwD,SAAU,WACVC,UAAU,EACVG,QAAQ,EACRD,KAAM,SAAA/D,GAAG,OAAI,cAAC,IAAD,CAAQY,MAAOZ,EAAI/B,SAAW,UAAY,SAAUkB,UAAU,cAA9D,SAA6Ea,EAAI/B,SAAW,MAAQ,SAErH,CACImC,KAAM,GACNwD,SAAU,MACVG,KAAM,SAAA/D,GAAG,OACL,gCACI,cAAC,IAAD,CAAOb,UAAU,qBAAqB+E,QAAS,kBAAM5B,EAAa,CAAEpD,GAAIc,EAAIhC,IAAK2K,KAAM3I,EAAI2I,KAAM1K,SAAU+B,EAAI/B,SAAUmE,MAAOC,EAAUD,KAAM5D,KAAM,cAAtJ,SACKqD,EAAa,oBAElB,cAAC,IAAD,CAAO1C,UAAU,qBAAqB+E,QAAS,kBAAM5B,EAAa,CAAEpD,GAAIc,EAAIhC,IAAK2K,KAAM3I,EAAI2I,KAAMvG,MAAOC,EAAUD,KAAM5D,KAAM,YAA9H,SACKqD,EAAa,oBAMlC,OACI,qCACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAM5C,GAAG,QAIb,cAAC,IAAD,UACI,eAAC,IAAD,CAAMA,GAAG,KAAT,UACI,cAAC,IAAD,CAAQT,KAAK,OAAOU,GAAG,aAAaS,YAAY,wBAAwBC,QAAS,SAACrC,GAAD,OAAQuF,EAAavF,EAAGsC,OAAOC,UAChH,cAAC,IAAD,CACIjC,MAAM,eACN8F,QAASA,EACT5E,KAAMwJ,EACNpE,kBAAkB,EAClBC,YAAY,EACZC,gBAAiB1B,cAMrC,eAAC,IAAD,CACIP,KAAMC,EAAUD,KAChBkC,SAAU,WACNhC,EAAa,CAAEF,MAAM,EAAO5D,KAAM6D,EAAU7D,QAEhDoC,MAA0B,WAAnByB,EAAU7D,KAAoB,SAA8B,aAAnB6D,EAAU7D,KAAsB,UAAY,OAC5FsC,KAA0B,SAAnBuB,EAAU7D,MAAsC,WAAnB6D,EAAU7D,KAAqB,KAAO,GAN9E,UAQI,cAAC,IAAD,CAAc+F,aAAW,EAAzB,SACI,cAAC,IAAD,UAAiC,WAAnBlC,EAAU7D,KAAoB,uBAA4C,SAAnB6D,EAAU7D,KAAkB,qBAA0C,WAAnB6D,EAAU7D,KAAoB,eAAiB,8BAE1K6D,EAAUD,KAAO,cAAC,IAAD,UACM,WAAnBC,EAAU7D,KAAoB,mEAAqC,iCAAS6D,EAAUsG,OAAxD,OAAmG,aAAnBtG,EAAU7D,KAAsB,uFAAyD,iCAAS6D,EAAUsG,OAA5E,OAAoG,OACvO,KACI,WAAnBtG,EAAU7D,MAAwC,aAAnB6D,EAAU7D,KAAsB,eAAC,IAAD,WAC5D,cAAC,IAAD,CAASoC,MAA0B,WAAnByB,EAAU7D,KAAoB,SAAW,UAAW0F,QAAS,iBAAyB,WAAnB7B,EAAU7D,KAAoB+E,EAAalB,EAAUnD,IAAMwE,EAAerB,EAAUnD,KAAvK,iBACA,cAAC,IAAD,CACI0B,MAAM,YACNsD,QAAS,kBAAM5B,EAAa,CAAEF,MAAM,KAFxC,uBAIc","file":"static/js/12.ebe9b5be.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { CForm, CButton, CFormGroup, CSelect, CCard, CTextarea, CInputFile, CSpinner, CCardBody, CCardFooter, CSwitch, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio, CAlert }\n    from '@coreui/react'\nimport { CategoriesList as CallCategoriesList } from '../../../src/server/CategoriesManagement'\nimport { DiscussionsEdit as EditDiscussion } from '../../../src/server/DiscussionsManagement'\nimport { UploadMedia } from '../../../src/server/MediasManagement'\n\n\nconst DiscussionsEdit = ({ discussion, setDiscussion, setToastMessage, toastMessages, loadDiscussionsList }) => {\n    const [categories, setCategories] = useState([])\n    const [editingLoader, setEditingLoader] = useState(false)\n    const [mediaFile, setMediaFile] = useState()\n    const handleEdit = async (ev) => {\n        ev.preventDefault()\n        setEditingLoader(true)\n        const editDiscussionCallback = async function (mediaId) {\n            if (mediaId !== -1) {\n                let editObject = {\n                    title: discussion.title,\n                    description: discussion.description,\n                    category: discussion.category ? discussion.category : categories[0]._id,\n                    isPublic: discussion.isPublic.toString(),\n                }\n                if (mediaId !== -2) {\n                    editObject.medias = [mediaId]\n                }\n                console.log(editObject)\n                const response = await EditDiscussion(discussion._id, editObject, setToastMessage)\n                if (response.ok) {\n                    loadDiscussionsList()\n                    setToastMessage([\n                        { title: 'Congrats!', description: 'The information of discussion with id: ' + discussion._id + ' has been successfuly changed', type: 'success' }\n                    ])\n                }\n                else {\n                    setToastMessage([\n                        { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n                    ])\n                }\n            }\n            setEditingLoader(false)\n        }\n        if (mediaFile)\n            await UploadMedia(mediaFile, setToastMessage, editDiscussionCallback)\n        else\n            editDiscussionCallback(-2)\n    }\n    const loadCategories = async () => {\n        const response = await CallCategoriesList()\n        const Categories = (await response.json()).data\n        setCategories(Categories)\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'ID: ' + discussion._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"discussion\" onSubmit={handleEdit}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"title\">Discussion Title</CLabel>\n                                    <CInput type=\"text\" id=\"title\" required placeholder=\"Enter title...\" onInput={(ev) => setDiscussion({ ...discussion, title: ev.target.value })} autoComplete=\"name\" value={discussion.title} />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CLabel col md=\"2\" htmlFor=\"file-input\">Image/Video</CLabel>\n                                    <CCol xs=\"12\" md=\"9\" className=\"ml-n5 mt-1\">\n                                        <CInputFile id=\"file-input\" name=\"file-input\" onChange={(ev) => setMediaFile(ev.target.files[0])} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol xs=\"12\" sm=\"3\">\n                                        <CLabel htmlFor=\"select\">Category</CLabel>\n                                        <CSelect custom name=\"category\" id=\"category\" required onChange={(ev) => { setDiscussion({ ...discussion, category: ev.target.value }) }} value={discussion.category ? discussion.category._id : categories[0] ? categories[0]._id : ''}>\n                                            {categories.filter(category => category.type === 'general').map(category => {\n                                                return <option key={category._id} value={category._id}>{category.name}</option>\n                                            })}\n                                        </CSelect>\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"4\" className=\"col-form-label\">\n                                        I want to publish this discussion:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n5\">\n                                        <CSwitch\n                                            onChange={(ev) => setDiscussion({ ...discussion, isPublic: ev.target.checked })}\n                                            className=\"ml-n5 mt-1\"\n                                            color=\"info\"\n                                            checked={discussion.isPublic ? true : false}\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\n                                    <CTextarea rows=\"6\" name=\"description\" id=\"description\" onInput={(ev) => setDiscussion({ ...discussion, description: ev.target.value })} value={discussion.description}></CTextarea>\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Edit Discussion</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {editingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n        </>\n    )\n}\n\nexport default DiscussionsEdit\n","import React from 'react'\nimport { CBadge, CListGroup, CListGroupItem, CCard, CCardBody, CCardFooter, CCardHeader, CCol, CProgress, CRow, CCallout, CImg }\n    from '@coreui/react'\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\nconst DiscussionsDetail = ({ discussion }) => {\n    console.log('discussion: ', discussion)\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">ID: {discussion._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            {discussion ? <CRow>\n                <CCol sm={discussion.medias[0] ? '6' : '12'}>\n                    <CListGroup>\n                        <CListGroupItem><strong>Title: </strong>{discussion.title}</CListGroupItem>\n                        <CListGroupItem><strong>#Replies: </strong>{discussion.replies.length}</CListGroupItem>\n                        <CListGroupItem><strong>Owner: </strong>{discussion.owner ? discussion.owner.email : 'Not specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Category: </strong>{discussion.category ? discussion.category.name : 'Not specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Is this discussion visible for users: </strong><CBadge color={discussion.isPublic ? 'success' : 'danger'} className=\"ml-2 p-2\">{discussion.isPublic ? 'Yes' : 'No'}</CBadge></CListGroupItem>\n                        <CListGroupItem><strong>Created At: </strong>{discussion.createdAt ? discussion.createdAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                        <CListGroupItem><strong>Last Update At: </strong>{discussion.updatedAt ? discussion.updatedAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                    </CListGroup>\n                </CCol>\n                <CCol sm=\"6\">\n                    {discussion.medias[0] ? <CImg style={{ maxHeight: \"300px\", maxWidth: \"100%\", marginTop: \"10px\" }} src={discussion.medias[0].path} /> : null}\n                </CCol>\n            </CRow> : null}\n            <CCard className=\"mt-4\">\n                <CCardHeader>\n                    Description:\n                </CCardHeader>\n                <p className=\"pl-4 pt-3\">{discussion.description}</p>\n            </CCard>\n        </>\n    )\n}\n\nexport default DiscussionsDetail\n","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow, CInput, CBadge, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody }\n    from '@coreui/react'\nimport { DiscussionsList as CallDiscussionsList, DiscussionsEdit as CallDiscussionsEdit } from '../../../src/server/DiscussionsManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { freeSet } from '@coreui/icons'\nimport DiscussionsEdit from './DiscussionsEdit'\nimport DiscussionsDetail from './DiscussionsDetail'\nimport RepliesList from './RepliesList'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst DiscussionsList = () => {\n    const [Discussions, setDiscussions] = useState([])\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempDiscussions, setTempDiscussions] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadDiscussionsList = async () => {\n        setLoading(true)\n        const response = await CallDiscussionsList()\n        const DiscussionsList = (await response.json()).data\n        console.log(DiscussionsList)\n        setDiscussions(DiscussionsList)\n        handleSearch(searchString, DiscussionsList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, DiscussionsList) => {\n        keyword = keyword.toLowerCase()\n        const DiscussionsArray = DiscussionsList ? DiscussionsList : Discussions\n        const temp = DiscussionsArray.filter(Discussion => {\n            return Discussion.title.toLowerCase().includes(keyword) || Discussion.owner.email.toLowerCase().includes(keyword) || Discussion.createdAt.toString().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempDiscussions(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CallDiscussionsEdit(id, { isDeleted: 'true' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The Discussion with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            await loadDiscussionsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false, type: 'delete' })\n    }\n\n    const handleIsPublic = async (id) => {\n        const response = await CallDiscussionsEdit(id, { isPublic: !modalInfo.isPublic + '' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The publicity status of Discussion with id: ' + id + ' has been successfuly changed', type: 'success' }\n            ])\n            await loadDiscussionsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    useEffect(() => {\n        loadDiscussionsList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Title</strong>,\n            selector: 'title',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Category</strong>,\n            selector: 'category',\n            sortable: true,\n            left: true,\n            cell: row => row.category ? row.category.name : 'Not specified'\n        },\n        {\n            name: <strong>Posted at</strong>,\n            selector: 'date',\n            sortable: true,\n            center: true,\n            cell: row => row.createdAt.split('T')[0]\n        },\n        {\n            name: <strong>Author</strong>,\n            selector: 'owner.email',\n            sortable: true,\n            center: true,\n        },\n        {\n            name: <strong>Is Visible</strong>,\n            selector: 'isPublic',\n            sortable: true,\n            center: true,\n            cell: row => <CBadge color={row.isPublic ? 'success' : 'danger'} className=\"float-right\">{row.isPublic ? 'Yes' : 'No'}</CBadge>\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, show: !modalInfo.show, type: 'detail' })}>\n                        {generateIcon('cilInfo')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, show: !modalInfo.show, type: 'edit' })}>\n                        {generateIcon('cilPencil')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, isPublic: row.isPublic, show: !modalInfo.show, type: 'isPublic' })}>\n                        {generateIcon('cilCloudUpload')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, show: !modalInfo.show, type: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, replies: row.replies, show: !modalInfo.show, type: 'replies' })}>\n                        {generateIcon('cilCommentBubble')}\n                    </CLink>\n                </div>,\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"6\">\n\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Discussions List\"\n                                columns={columns}\n                                data={tempDiscussions}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.type })\n                    /*                     setToastMessage([]) */\n                }}\n                color={modalInfo.type === 'delete' ? 'danger' : modalInfo.type === 'isPublic' ? 'warning' : 'info'}\n                size={(modalInfo.type === 'edit' || modalInfo.type === 'detail' || modalInfo.type === 'replies') ? 'xl' : ''}\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.type === 'delete' ? 'Delete Discussion account' : modalInfo.type === 'edit' ? 'Edit Discussion profile' : modalInfo.type === 'detail' ? 'Discussion detail' : 'Change Publicity status'}</CModalTitle>\n                </CModalHeader>\n                {modalInfo.show ? <CModalBody>\n                    {modalInfo.type === 'delete' ? <div>Are you sure you want to delete <strong>{modalInfo.title}</strong>?</div> : modalInfo.type === 'isPublic' ? <div>Are you sure you want to change publicity status of <strong>{modalInfo.title}</strong>?</div> : null}\n                    {modalInfo.type === 'edit' ? <DiscussionsEdit loadDiscussionsList={loadDiscussionsList} discussion={modalInfo} setDiscussion={setModalInfo} setToastMessage={setToastMessage} toastMessages={toastMessages} /> : modalInfo.type === 'detail' ? <DiscussionsDetail discussion={modalInfo} /> : modalInfo.type === 'replies' ? <RepliesList discussion={modalInfo} setToastMessage={setToastMessage} loadDiscussionsList={loadDiscussionsList} /> : null}\n                </CModalBody> : null}\n                {modalInfo.type === 'delete' || modalInfo.type === 'isPublic' ? <CModalFooter>\n                    <CButton color={modalInfo.type === 'delete' ? 'danger' : 'warning'} onClick={() => modalInfo.type === 'delete' ? handleDelete(modalInfo.id) : handleIsPublic(modalInfo.id)}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: false })}\n                    >Cancel</CButton>\n                </CModalFooter> : null}\n            </CModal>\n            {toastMessages.map(toastMessage => {\n                console.log(toastMessage)\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + Math.floor(Math.random() * 1000000)}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default DiscussionsList\n","// importing GetUrl from the server\nimport GetUrl from \"../server/ApiEndpoints\";\n\n// Getting the token from the local storage\nlet bearerToken = \"Bearer \" + localStorage.getItem(\"HDI-token\");\n\n// Getting the categories list using url from the server by using GET method and if its not successful it will display an error message\nconst CategoriesList = async function () {\n    return await fetch(GetUrl(\"CategoriesList\"), {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        }\n    }).catch(error => {\n        console.log(error.message);\n    });\n};\n\n// Editing the categories list using url from the server by using PATCH method and also stringifying the object and if its not successful it will display an error message\nconst CategoriesEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesEdit\") + \"/\" + id, {\n        method: \"PATCH\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error);\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\nconst CategoriesDelete = async function (id, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesDelete\") + \"/\" + id, {\n        method: \"DELETE\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        }\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error);\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\n// Adding a new Category. if its not successful it will display an error message\nconst CategoriesAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesAdd\"), {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\n// exporting the categoriesList and categoriesEdit functions\nexport { CategoriesList, CategoriesEdit, CategoriesAdd, CategoriesDelete };","import GetUrl from '../server/ApiEndpoints'\nimport AWS from 'aws-sdk'\n\nconst ID = 'AKIAWBK3UNFZVVF7OF4B';\nconst SECRET = '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';\nconst BUCKET_NAME = 'indigenous-images';\nconst s3 = new AWS.S3({\n    accessKeyId: ID,\n    secretAccessKey: SECRET\n});\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\nconst MediasAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl('MediasAdd'), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\nconst UploadMedia = async function (fileContent, setToastMessage, callback) {\n    const params = {\n        Bucket: BUCKET_NAME,\n        Key: Math.floor(Math.random() * 10000000000).toString(),\n        Body: fileContent,\n        ContentType: 'image/jpeg',\n        ACL: 'public-read-write'\n    };\n\n    s3.upload(params, async function (err, data) {\n        if (err) {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request: ' + err, type: 'danger' }\n            ])\n        }\n        console.log(`File uploaded successfully.`, data);\n        let response = await MediasAdd({ type: 'image', extension: '.' + fileContent.name.split('.')[1], path: data.Location }, setToastMessage)\n        if (response.ok) {\n            let jsonResult = await response.json()\n            await callback(jsonResult.data._id)\n        }\n        else {\n            await callback(-1)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request: ' + err, type: 'danger' }\n            ])\n        }\n    })\n}\n\nconst UploadManyMedias = async function (fileContents, setToastMessage, callback) {\n    let promises = []\n    fileContents.forEach(fileContent => {\n        const params = {\n            Bucket: BUCKET_NAME,\n            Key: Math.floor(Math.random() * 10000000000).toString(),\n            Body: fileContent.content,\n            ContentType: 'image/jpeg',\n            ACL: 'public-read-write'\n        };\n        promises.push({ type: fileContent.type, promise: s3.upload(params).promise() })\n    })\n    Promise.all(promises.map(pr => pr.promise)).then(async function (results) {\n        let mediaIds = []\n        for (let i = 0; i < results.length; i++) {\n            console.log(`File uploaded successfully.`, results[i]);\n            if (fileContents[i].type !== 'icon') {\n                let response = await MediasAdd({ type: 'image', extension: '.jpg', path: results[i].Location }, setToastMessage)\n                if (response.ok) {\n                    let jsonResult = await response.json()\n                    mediaIds.push(jsonResult.data._id)\n                }\n                else {\n                    setToastMessage([\n                        { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n                    ])\n                    return\n                }\n            }\n            else\n                mediaIds.push(results[i].Location)\n        }\n        await callback(mediaIds)\n    });\n}\n\nexport { UploadMedia, UploadManyMedias }","import GetUrl from '../server/ApiEndpoints'\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\nconst DiscussionsAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl('DiscussionsAdd'), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\nconst DiscussionsList = async function () {\n    return await fetch(GetUrl('DiscussionsList'), {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst DiscussionsDetail = async function (id) {\n    return await fetch(GetUrl('DiscussionsList') + '/' + id, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst DiscussionsEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl('DiscussionsEdit') + '/' + id, {\n        method: 'PATCH',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json'\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\n\nexport { DiscussionsList, DiscussionsEdit, DiscussionsDetail, DiscussionsAdd }","import GetUrl from '../server/ApiEndpoints'\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\nconst RepliesAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl('RepliesAdd'), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\nconst RepliesEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl('RepliesEdit') + '/' + id, {\n        method: 'PATCH',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json'\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\n\nexport { RepliesEdit, RepliesAdd }","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow, CInput, CBadge, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody }\n    from '@coreui/react'\nimport { RepliesEdit as CallRepliesEdit } from '../../server/RepliesManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { freeSet } from '@coreui/icons'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst RepliesList = ({ discussion, setToastMessage, loadDiscussionsList }) => {\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempReplies, setTempReplies] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const loadRepliesList = async () => {\n        setLoading(true)\n        const RepliesList = discussion.replies\n        handleSearch(searchString, RepliesList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, RepliesList) => {\n        keyword = keyword.toLowerCase()\n        const RepliesArray = RepliesList ? RepliesList : discussion.replies\n        const temp = RepliesArray.filter(Reply => {\n            return Reply.text.toLowerCase().includes(keyword) || Reply.owner.firstName.toLowerCase().includes(keyword) || Reply.owner.lastName.toLowerCase().includes(keyword) || Reply.createdAt.toString().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempReplies(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CallRepliesEdit(id, { isDeleted: 'true' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The Reply with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            discussion.replies = discussion.replies.filter(function (item) {\n                return item._id !== id\n            })\n            await loadRepliesList()\n            loadDiscussionsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false, type: 'delete' })\n    }\n\n    const handleIsPublic = async (id) => {\n        const response = await CallRepliesEdit(id, { isPublic: !modalInfo.isPublic + '' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The publicity status of Reply with id: ' + id + ' has been successfuly changed', type: 'success' }\n            ])\n            let rep = discussion.replies.find(function (item) {\n                return item._id === id\n            })\n            rep.isPublic = !modalInfo.isPublic\n            await loadRepliesList()\n            loadDiscussionsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    useEffect(() => {\n        loadRepliesList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Text</strong>,\n            selector: 'text',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Category</strong>,\n            selector: 'category',\n            sortable: true,\n            left: true,\n            cell: row => row.category ? row.category.name : 'Not specified'\n        },\n        {\n            name: <strong>Replied at</strong>,\n            selector: 'date',\n            sortable: true,\n            center: true,\n            cell: row => row.createdAt.split('T')[0]\n        },\n        {\n            name: <strong>Author</strong>,\n            selector: 'owner',\n            sortable: true,\n            center: true,\n            cell: row => (row.owner.firstName ? row.owner.firstName : '') + ' ' + (row.owner.lastName ? row.owner.lastName : '')\n        },\n        {\n            name: <strong>Is Visible</strong>,\n            selector: 'isPublic',\n            sortable: true,\n            center: true,\n            cell: row => <CBadge color={row.isPublic ? 'success' : 'danger'} className=\"float-right\">{row.isPublic ? 'Yes' : 'No'}</CBadge>\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, text: row.text, isPublic: row.isPublic, show: !modalInfo.show, type: 'isPublic' })}>\n                        {generateIcon('cilCloudUpload')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, text: row.text, show: !modalInfo.show, type: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                </div>,\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"6\">\n\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Replies List\"\n                                columns={columns}\n                                data={tempReplies}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.type })\n                }}\n                color={modalInfo.type === 'delete' ? 'danger' : modalInfo.type === 'isPublic' ? 'warning' : 'info'}\n                size={(modalInfo.type === 'edit' || modalInfo.type === 'detail') ? 'xl' : ''}\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.type === 'delete' ? 'Delete Reply account' : modalInfo.type === 'edit' ? 'Edit Reply profile' : modalInfo.type === 'detail' ? 'Reply detail' : 'Change Publicity status'}</CModalTitle>\n                </CModalHeader>\n                {modalInfo.show ? <CModalBody>\n                    {modalInfo.type === 'delete' ? <div>Are you sure you want to delete <strong>{modalInfo.text}</strong>?</div> : modalInfo.type === 'isPublic' ? <div>Are you sure you want to change publicity status of <strong>{modalInfo.text}</strong>?</div> : null}\n                </CModalBody> : null}\n                {modalInfo.type === 'delete' || modalInfo.type === 'isPublic' ? <CModalFooter>\n                    <CButton color={modalInfo.type === 'delete' ? 'danger' : 'warning'} onClick={() => modalInfo.type === 'delete' ? handleDelete(modalInfo.id) : handleIsPublic(modalInfo.id)}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: false })}\n                    >Cancel</CButton>\n                </CModalFooter> : null}\n            </CModal>\n        </>\n    )\n}\n\nexport default RepliesList\n"],"sourceRoot":""}