{"version":3,"sources":["views/polls/PollsEdit.js","views/polls/PollsDetail.js","views/polls/PollsList.js","server/PollsManagement.js"],"names":["PollsEdit","poll","setPoll","setToastMessage","loadPollsList","toastMessages","useState","editingLoader","setEditingLoader","handleEdit","ev","a","preventDefault","editObject","title","link","startDate","endDate","isPublic","toString","EditPoll","_id","ok","description","type","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","min","toISOString","split","onChange","tag","checked","color","size","PollsDetail","console","log","replace","substring","href","createdAt","updatedAt","generateIcon","iconName","content","freeSet","PollsList","Polls","setPolls","show","modalInfo","setModalInfo","tempPolls","setTempPolls","searchString","setSearchString","loading","setLoading","CallPollsList","response","json","data","handleSearch","keyword","toLowerCase","temp","filter","Poll","includes","sort","b","reverse","handleDelete","CallPollsEdit","isDeleted","handleIsPublic","useEffect","columns","name","selector","sortable","left","cell","toLocaleDateString","center","onClick","jobType","pollType","highlightOnHover","pagination","progressPending","onClosed","closeButton","map","toastMessage","position","autohide","fade","Math","floor","random","bearerToken","localStorage","getItem","PollsAdd","addObject","fetch","GetUrl","headers","body","JSON","stringify","then","catch","error","mode","message"],"mappings":"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","file":"static/js/20.68a63065.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { CForm, CButton, CFormGroup, CSelect, CCard, CSpinner, CCardBody, CCardFooter, CSwitch, CCol, CLabel, CRow, CInput, CLink }\n    from '@coreui/react'\nimport { PollsEdit as EditPoll } from '../../../src/server/PollsManagement'\n\n\nconst PollsEdit = ({ poll, setPoll, setToastMessage, toastMessages, loadPollsList }) => {\n    const [editingLoader, setEditingLoader] = useState(false)\n    const handleEdit = async (ev) => {\n        ev.preventDefault()\n        setEditingLoader(true)\n        let editObject = {\n            title: poll.title,\n            link: poll.link,\n            startDate: poll.startDate,\n            endDate: poll.endDate,\n            isPublic: poll.isPublic.toString()\n        }\n        const response = await EditPoll(poll._id, editObject, setToastMessage)\n        if (response.ok) {\n            loadPollsList()\n            setToastMessage([\n                { title: 'Congrats!', description: 'The information of poll with id: ' + poll._id + ' has been successfuly changed', type: 'success' }\n            ])\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        setEditingLoader(false)\n    }\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'ID: ' + poll._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"poll\" onSubmit={handleEdit}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Poll Title</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name...\" onInput={(ev) => setPoll({ ...poll, title: ev.target.value })} autoComplete=\"title\" value={poll.title} />\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"link\">Poll Link</CLabel>\n                                    <CInput type=\"text\" id=\"link\" required placeholder=\"Enter Link...\" onInput={(ev) => setPoll({ ...poll, link: ev.target.value })} autoComplete=\"link\" value={poll.link} />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol sm=\"6\">\n                                        <CLabel htmlFor=\"startDate\">Start Date</CLabel>\n                                        <CInput type=\"date\" min={new Date().toISOString().split('T')[0]} id=\"startDate\" required placeholder=\"Enter start date...\" onChange={(ev) => setPoll({ ...poll, startDate: ev.target.value })} value={poll.startDate.split('T')[0]} />\n                                    </CCol>\n                                    <CCol sm=\"6\">\n                                        <CLabel htmlFor=\"endDate\">End Date</CLabel>\n                                        <CInput type=\"date\" min={new Date().toISOString().split('T')[0]} id=\"endDate\" required placeholder=\"Enter end date...\" onChange={(ev) => setPoll({ ...poll, endDate: ev.target.value })} value={poll.endDate.split('T')[0]} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label\">\n                                        I want to publish this poll:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n5\">\n                                        <CSwitch\n                                            onChange={(ev) => setPoll({ ...poll, isPublic: ev.target.checked })}\n                                            className=\"ml-n5 mt-1\"\n                                            color=\"info\"\n                                            checked={poll.isPublic ? true : false}\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Edit Poll</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {editingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n        </>\n    )\n}\n\nexport default PollsEdit\n","import React from 'react'\nimport { CBadge, CListGroup, CListGroupItem, CCard, CCardBody, CLink, CCol, CRow }\n    from '@coreui/react'\n\n\n\n\n\nconst PollsDetail = ({ poll }) => {\n    console.log('poll: ', poll)\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">ID: {poll._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            {poll ? <CRow className=\"pb-4\">\n                <CCol sm=\"6\">\n                    <CListGroup>\n                        <CListGroupItem><strong>Title: </strong>{poll.title}</CListGroupItem>\n                        <CListGroupItem><strong>Start Date: </strong>{poll.startDate ? poll.startDate.replace('T', ' ').replace('Z', '').substring(0, 16) : ''}</CListGroupItem>\n                        <CListGroupItem><strong>End Date: </strong>{poll.endDate ? poll.endDate.replace('T', ' ').replace('Z', '').substring(0, 16) : ''}</CListGroupItem>\n                    </CListGroup>\n                </CCol>\n                <CCol sm=\"6\">\n                    <CListGroup>\n                        <CListGroupItem><strong>Link: </strong><CLink target=\"_blank\" href={poll.link}>{poll.link}</CLink></CListGroupItem>\n                        <CListGroupItem><strong>Created At: </strong>{poll.createdAt ? poll.createdAt.replace('T', ' ').replace('Z', '').substring(0, 16) : ''}</CListGroupItem>\n                        <CListGroupItem><strong>Last Update At: </strong>{poll.updatedAt ? poll.updatedAt.replace('T', ' ').replace('Z', '').substring(0, 16) : ''}</CListGroupItem>\n                    </CListGroup>\n                </CCol>\n            </CRow> : null}\n        </>\n    )\n}\n\nexport default PollsDetail\n","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow, CInput, CBadge, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody }\n    from '@coreui/react'\nimport { PollsList as CallPollsList, PollsEdit as CallPollsEdit } from '../../../src/server/PollsManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { freeSet } from '@coreui/icons'\nimport PollsEdit from './PollsEdit'\nimport PollsDetail from './PollsDetail'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst PollsList = () => {\n    const [Polls, setPolls] = useState([])\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempPolls, setTempPolls] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadPollsList = async () => {\n        setLoading(true)\n        const response = await CallPollsList()\n        const PollsList = (await response.json()).data\n        console.log(PollsList)\n        setPolls(PollsList)\n        handleSearch(searchString, PollsList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, PollsList) => {\n        keyword = keyword.toLowerCase()\n        const PollsArray = PollsList ? PollsList : Polls\n        const temp = PollsArray.filter(Poll => {\n            return Poll.title.toLowerCase().includes(keyword) || Poll.startDate.toLowerCase().includes(keyword) || Poll.endDate.toLowerCase().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempPolls(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CallPollsEdit(id, { isDeleted: 'true' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The Poll with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            await loadPollsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false, type: 'delete' })\n    }\n\n    const handleIsPublic = async (id) => {\n        const response = await CallPollsEdit(id, { isPublic: !modalInfo.isPublic + '' }, setToastMessage)\n        setModalInfo({ show: false, type: 'isPublic' })\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The publicity status of Poll with id: ' + id + ' has been successfuly changed', type: 'success' }\n            ])\n            await loadPollsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n    }\n    useEffect(() => {\n        loadPollsList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Title</strong>,\n            selector: 'title',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Start date</strong>,\n            selector: 'subTitle',\n            sortable: true,\n            left: true,\n            cell: row => new Date(row.startDate).toLocaleDateString()\n        },\n        {\n            name: <strong>End date</strong>,\n            selector: 'type',\n            sortable: true,\n            left: true,\n            cell: row => new Date(row.endDate).toLocaleDateString()\n        },\n        {\n            name: <strong>Is Visible</strong>,\n            selector: 'isPublic',\n            sortable: true,\n            center: true,\n            cell: row => <CBadge color={row.isPublic ? 'success' : 'danger'} className=\"float-right\">{row.isPublic ? 'Yes' : 'No'}</CBadge>\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, jobType: row.type, show: !modalInfo.show, type: 'detail' })}>\n                        {generateIcon('cilInfo')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, pollType: row.type, show: !modalInfo.show, type: 'edit' })}>\n                        {generateIcon('cilPencil')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, isPublic: row.isPublic, show: !modalInfo.show, type: 'isPublic' })}>\n                        {generateIcon('cilCloudUpload')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, show: !modalInfo.show, type: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                </div>,\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"6\">\n\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Polls List\"\n                                columns={columns}\n                                data={tempPolls}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.type })\n                    setToastMessage([])\n                }}\n                color={modalInfo.type === 'delete' ? 'danger' : modalInfo.type === 'isPublic' ? 'warning' : 'info'}\n                size={(modalInfo.type === 'edit' || modalInfo.type === 'detail') ? 'xl' : ''}\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.type === 'delete' ? 'Delete Poll account' : modalInfo.type === 'edit' ? 'Edit Poll profile' : modalInfo.type === 'detail' ? 'Poll detail' : 'Change Publicity status'}</CModalTitle>\n                </CModalHeader>\n                {modalInfo.show ? <CModalBody>\n                    {modalInfo.type === 'delete' ? <div>Are you sure you want to delete <strong>{modalInfo.title}</strong>?</div> : modalInfo.type === 'isPublic' ? <div>Are you sure you want to change publicity status of <strong>{modalInfo.title}</strong>?</div> : null}\n                    {modalInfo.type === 'edit' ? <PollsEdit loadPollsList={loadPollsList} poll={modalInfo} setPoll={setModalInfo} setToastMessage={setToastMessage} toastMessages={toastMessages} /> : modalInfo.type === 'detail' ? <PollsDetail poll={modalInfo} /> : null}\n                </CModalBody> : null}\n                {modalInfo.type === 'delete' || modalInfo.type === 'isPublic' ? <CModalFooter>\n                    <CButton color={modalInfo.type === 'delete' ? 'danger' : 'warning'} onClick={() => modalInfo.type === 'delete' ? handleDelete(modalInfo.id) : handleIsPublic(modalInfo.id)}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: false })}\n                    >Cancel</CButton>\n                </CModalFooter> : null}\n            </CModal>\n            {toastMessages.map(toastMessage => {\n                console.log(toastMessage)\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + Math.floor(Math.random() * 1000000)}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default PollsList\n","import GetUrl from '../server/ApiEndpoints'\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\nconst PollsAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl('PollsAdd'), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\nconst PollsList = async function () {\n    return await fetch(GetUrl('PollsList'), {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst PollsDetail = async function (id) {\n    return await fetch(GetUrl('PollsList') + '/' + id, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst PollsEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl('PollsEdit') + '/' + id, {\n        method: 'PATCH',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json'\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\n\nexport { PollsList, PollsEdit, PollsDetail, PollsAdd }"],"sourceRoot":""}