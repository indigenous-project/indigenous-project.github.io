{"version":3,"sources":["views/organizations/OrganizationsEdit.js","views/organizations/OrganizationsDetail.js","views/organizations/OrganizationsList.js"],"names":["Geocode","setApiKey","OrganizationsEdit","organization","setOrganization","setToastMessage","loadOrganizationsList","toastMessages","useState","categories","setCategories","editingLoader","setEditingLoader","mediaFile","setMediaFile","iconFile","setIconFile","encodeHTML","str","buf","i","length","unshift","charCodeAt","join","decodeHTML","replace","match","dec","String","fromCharCode","handleEdit","ev","a","fileContents","push","content","type","console","log","preventDefault","editOrganizationCallback","mediaIds","fromAddress","contact","address","then","response","results","geometry","location","lat","lng","error","editObject","name","coords","long","email","phone","website","description","category","isPublic","toString","isIndigenous","isAvailable","openHours","monday","tuesday","wednesday","thursday","friday","saturday","sunday","medias","icon","EditOrganization","_id","ok","title","UploadManyMedias","loadCategories","CallCategoriesList","json","Categories","data","useEffect","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","col","md","xs","onChange","files","custom","filter","map","tag","checked","color","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","editor","size","OrganizationsDetail","style","maxHeight","maxWidth","src","createdAt","updatedAt","marginTop","path","generateIcon","iconName","freeSet","OrganizationsList","Organizations","setOrganizations","show","modalInfo","setModalInfo","tempOrganizations","setTempOrganizations","searchString","setSearchString","loading","setLoading","CallOrganizationsList","handleSearch","keyword","toLowerCase","temp","Organization","includes","sort","b","reverse","handleDelete","CallOrganizationsEdit","isDeleted","handleIsPublic","columns","selector","cell","width","sortable","left","center","onClick","highlightOnHover","pagination","progressPending","onClosed","closeButton","toastMessage","position","autohide","fade","Math","floor","random"],"mappings":"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","file":"static/js/29.f74a516e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { CForm, CButton, CFormGroup, CSelect, CCard, CInputFile, CSpinner, CCardBody, CCardFooter, CSwitch, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio, CAlert }\n    from '@coreui/react'\nimport { CategoriesList as CallCategoriesList } from '../../../src/server/CategoriesManagement'\nimport { OrganizationsEdit as EditOrganization } from '../../../src/server/OrganizationsManagement'\nimport { Editor } from '@tinymce/tinymce-react';\nimport { UploadManyMedias } from '../../../src/server/MediasManagement'\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyASXJAnvrEDFYxlqDRwtHCe8bW69_TV7RE\");\n\n\nconst OrganizationsEdit = ({ organization, setOrganization, setToastMessage, toastMessages, loadOrganizationsList }) => {\n    const [categories, setCategories] = useState([])\n    const [editingLoader, setEditingLoader] = useState(false)\n    const [mediaFile, setMediaFile] = useState()\n    const [iconFile, setIconFile] = useState()\n    const encodeHTML = str => {\n        if (!str)\n            return ''\n        let buf = [];\n\n        for (var i = str.length - 1; i >= 0; i--) {\n            buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));\n        }\n\n        return buf.join('');\n    }\n\n    const decodeHTML = str => {\n        return str.replace(/&#(\\d+);/g, function (match, dec) {\n            return String.fromCharCode(dec);\n        });\n    }\n    const handleEdit = async (ev) => {\n        let fileContents = []\n        if (mediaFile)\n            fileContents.push({ content: mediaFile, type: 'media' })\n        if (iconFile)\n            fileContents.push({ content: iconFile, type: 'icon' })\n        console.log('fileContents: ', fileContents)\n        ev.preventDefault()\n        setEditingLoader(true)\n        const editOrganizationCallback = async function (mediaIds) {\n            console.log('mediaIds: ', mediaIds)\n            await Geocode.fromAddress(organization.contact.address).then(\n                (response) => {\n                    const { lat, lng } = response.results[0].geometry.location;\n                    organization.lat = lat\n                    organization.lng = lng\n                    console.log(lat, lng);\n                },\n                (error) => {\n                    console.error(error);\n                }\n            );\n            if (mediaIds.length === fileContents.length || fileContents.length === 0) {\n                let editObject = {\n                    name: organization.name,\n                    coords: { lat: organization.lat, long: organization.lng },\n                    contact: { email: organization.contact.email, phone: organization.contact.phone, website: organization.contact.website, address: organization.contact.address },\n                    description: encodeHTML(decodeHTML(organization.description)),\n                    category: organization.category,\n                    isPublic: organization.isPublic.toString(),\n                    isIndigenous: organization.isIndigenous.toString(),\n                    isAvailable: organization.isAvailable.toString(),\n                    openHours: {\n                        monday: organization.openHours.monday,\n                        tuesday: organization.openHours.tuesday,\n                        wednesday: organization.openHours.wednesday,\n                        thursday: organization.openHours.thursday,\n                        friday: organization.openHours.friday,\n                        saturday: organization.openHours.saturday,\n                        sunday: organization.openHours.sunday\n                    }\n                }\n                if (mediaFile) {\n                    editObject.medias = [mediaIds[0]]\n                }\n                if (iconFile) {\n                    editObject.icon = mediaFile ? mediaIds[1] : mediaIds[0]\n                }\n                console.log(editObject)\n                const response = await EditOrganization(organization._id, editObject, setToastMessage)\n                if (response.ok) {\n                    loadOrganizationsList()\n                    setToastMessage([\n                        { title: 'Congrats!', description: 'The information of organization with id: ' + organization._id + ' has been successfuly changed', type: 'success' }\n                    ])\n                }\n                else {\n                    setToastMessage([\n                        { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n                    ])\n                }\n            }\n            setEditingLoader(false)\n        }\n        await UploadManyMedias(fileContents, setToastMessage, editOrganizationCallback)\n    }\n    const loadCategories = async () => {\n        const response = await CallCategoriesList()\n        const Categories = (await response.json()).data\n        setCategories(Categories)\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'ID: ' + organization._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"organization\" onSubmit={handleEdit}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Organization Name</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name...\" onInput={(ev) => setOrganization({ ...organization, name: ev.target.value })} value={organization.name} autoComplete=\"name\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"phone\">Phone Number:</CLabel>\n                                        <CInput type=\"number\" id=\"phone\" placeholder=\"Enter phone number...\" onInput={(ev) => setOrganization({ ...organization, contact: { ...organization.contact, phone: ev.target.value } })} value={organization.contact.phone} autoComplete=\"phone\" />\n                                    </CCol>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"email\">Email:</CLabel>\n                                        <CInput type=\"email\" id=\"email\" placeholder=\"Enter email...\" onInput={(ev) => setOrganization({ ...organization, contact: { ...organization.contact, email: ev.target.value } })} value={organization.contact.email} autoComplete=\"email\" />\n                                    </CCol>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"website\">Website:</CLabel>\n                                        <CInput type=\"text\" id=\"website\" placeholder=\"Enter website...\" onInput={(ev) => setOrganization({ ...organization, contact: { ...organization.contact, website: ev.target.value } })} value={organization.contact.website} autoComplete=\"website\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Address:</CLabel>\n                                    <CInput type=\"text\" id=\"address\" required placeholder=\"Enter address...\" onInput={(ev) => setOrganization({ ...organization, contact: { ...organization.contact, address: ev.target.value } })} value={organization.contact.address} autoComplete=\"address\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CLabel col md=\"2\" htmlFor=\"file-input\">Image/Video</CLabel>\n                                    <CCol xs=\"12\" md=\"9\" className=\"ml-n5 mt-1\">\n                                        <CInputFile id=\"file-input\" name=\"file-input\" onChange={(ev) => setMediaFile(ev.target.files[0])} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CLabel col md=\"1\" htmlFor=\"icon\">Icon</CLabel>\n                                    <CCol xs=\"12\" md=\"9\" className=\"ml-n3 mt-1\">\n                                        <CInputFile id=\"icon\" required name=\"icon\" onChange={(ev) => setIconFile(ev.target.files[0])} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"select\">Category</CLabel>\n                                    <CCol xs=\"12\" md=\"3\">\n                                        <CSelect custom name=\"category\" className=\"ml-n3\" id=\"category\" required onChange={(ev) => { setOrganization({ ...organization, category: ev.target.value }) }} value={organization.category ? organization.category._id : categories[0] ? categories[0]._id : ''}>\n                                            {categories.filter(category => category.type === 'organization').map(category => {\n                                                return <option key={category._id} value={category._id}>{category.name}</option>\n                                            })}\n                                        </CSelect>\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel className=\"mt-4\" htmlFor=\"open-hours-monday\">Weekly open hours:</CLabel>\n                                </CFormGroup>\n                                <CFormGroup row className=\"border p-3 ml-1 mr-1 mb-5\">\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-monday\">Monday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-monday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, monday: ev.target.value } })} value={organization.openHours.monday} autoComplete=\"monday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-tuesday\">Tuesday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-tuesday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, tuesday: ev.target.value } })} value={organization.openHours.tuesday} autoComplete=\"tuesday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-wednesday\">Wednesday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-wednesday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, wednesday: ev.target.value } })} value={organization.openHours.wednesday} autoComplete=\"wednesday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-thursday\">Thursday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-thursday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, thursday: ev.target.value } })} value={organization.openHours.thursday} autoComplete=\"thursday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-friday\">Friday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-friday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, friday: ev.target.value } })} value={organization.openHours.friday} autoComplete=\"friday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-saturday\">Saturday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-saturday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, saturday: ev.target.value } })} value={organization.openHours.saturday} autoComplete=\"saturday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-sunday\">Sunday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-sunday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, sunday: ev.target.value } })} value={organization.openHours.sunday} autoComplete=\"sunday\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label mr-n5\">\n                                        I want this organization to be visible:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n1\">\n                                        <CSwitch\n                                            onChange={(ev) => setOrganization({ ...organization, isPublic: ev.target.checked })}\n                                            className=\"ml-4 mt-1\"\n                                            color=\"info\"\n                                            checked={organization.isPublic ? true : false}\n                                        />\n                                    </CCol>\n                                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label\">\n                                        Is this organization Indigenous:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n5\">\n                                        <CSwitch\n                                            onChange={(ev) => setOrganization({ ...organization, isIndigenous: ev.target.checked })}\n                                            className=\"ml-n1 mt-1\"\n                                            color=\"info\"\n                                            checked={organization.isIndigenous ? true : false}\n                                        />\n                                    </CCol>\n                                    <CCol tag=\"label\" sm=\"4\" className=\"col-form-label\">\n                                        Is this organization Available at this moment:\n                                    </CCol>\n                                    <CCol sm=\"1\">\n                                        <CSwitch\n                                            onChange={(ev) => setOrganization({ ...organization, isAvailable: ev.target.checked })}\n                                            className=\"ml-n5 mt-1\"\n                                            color=\"info\"\n                                            checked={organization.isAvailable ? true : false}\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\n                                    <Editor\n                                        apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                        initialValue={decodeHTML(organization.description)}\n                                        init={{\n                                            height: 300,\n                                            menubar: false,\n                                            plugins: [\n                                                'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                                'searchreplace wordcount visualblocks visualchars code',\n                                                'insertdatetime media nonbreaking table directionality',\n                                                'emoticons template paste textpattern imagetools codesample'\n                                            ],\n                                            toolbar: 'bold italic sizeselect fontselect fontsizeselect | hr alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | insertfile undo redo | forecolor backcolor emoticons | ',\n                                        }}\n                                        onEditorChange={(content, editor) => {\n                                            setOrganization({ ...organization, description: content })\n                                        }}\n                                    />\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Edit Organization</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {editingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n        </>\n    )\n}\n\nexport default OrganizationsEdit\n","import React from 'react'\nimport { CBadge, CListGroup, CListGroupItem, CCard, CCardBody, CCardFooter, CCardHeader, CCol, CProgress, CRow, CCallout, CImg }\n    from '@coreui/react'\nimport { freeSet } from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport { Editor } from '@tinymce/tinymce-react';\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} className=\"mr-3 ml-1\" />)\n}\nconst decodeHTML = str => {\n    return str.replace(/&#(\\d+);/g, function (match, dec) {\n        return String.fromCharCode(dec);\n    });\n}\nconst OrganizationsDetail = ({ organization }) => {\n    console.log('organization: ', organization)\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">ID: {organization._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            {organization ? <CRow>\n                <CCol sm=\"6\">\n                    <CListGroup>\n                        <CListGroupItem><strong>Icon: </strong>{organization.icon ? <CImg style={{ maxHeight: \"50px\", maxWidth: \"50px\" }} src={organization.icon} /> : 'No icon included'}</CListGroupItem>\n                        <CListGroupItem><strong>Name: </strong>{organization.name}</CListGroupItem>\n                        <CListGroupItem><strong>Category: </strong>{organization.category ? organization.category.name : 'no category specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Email: </strong>{organization.contact.email ? organization.contact.email : 'no email specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Address: </strong>{organization.contact.address ? organization.contact.address : 'no address specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Website: </strong>{organization.contact.website ? organization.contact.website : 'no website specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Phone: </strong>{organization.contact.phone ? organization.contact.phone : 'no phone specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Is this organization visible for users: </strong><CBadge color={organization.isPublic ? 'success' : 'danger'} className=\"ml-2 p-2\">{organization.isPublic ? 'Yes' : 'No'}</CBadge></CListGroupItem>\n                        <CListGroupItem><strong>Is this organization indigenous: </strong><CBadge color=\"info\" className=\"ml-2 p-2\">{organization.isIndigenous ? 'Yes' : 'No'}</CBadge></CListGroupItem>\n                        <CListGroupItem><strong>Is this organization available: </strong><CBadge color=\"info\" className=\"ml-2 p-2\">{organization.isAvailable ? 'Yes' : 'No'}</CBadge></CListGroupItem>\n                        <CListGroupItem><strong>Created At: </strong>{organization.createdAt ? organization.createdAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                        <CListGroupItem><strong>Last Update At: </strong>{organization.updatedAt ? organization.updatedAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                    </CListGroup>\n                </CCol>\n                <CCol sm=\"6\">\n                    <CListGroup>\n                        <CListGroupItem><strong>Lat: </strong>{organization.coords.lat}</CListGroupItem>\n                        <CListGroupItem><strong>Long: </strong>{organization.coords.long}</CListGroupItem>\n                    </CListGroup>\n                    {organization.medias.length > 0 ? <CImg style={{ maxHeight: \"300px\", maxWidth: \"100%\", marginTop: \"10px\" }} src={organization.medias[0].path} /> : null}\n                </CCol>\n                <CCol sm=\"12\" className=\"mt-4\">\n                    <CListGroup>\n                        <CListGroupItem><strong>Open hours:</strong></CListGroupItem>\n                        <CListGroupItem><small>Monday: {organization.openHours.monday ? organization.openHours.monday : 'Not specified'}</small></CListGroupItem>\n                        <CListGroupItem><small>Tuesday: {organization.openHours.tuesday ? organization.openHours.tuesday : 'Not specified'}</small></CListGroupItem>\n                        <CListGroupItem><small>Wednesday: {organization.openHours.wednesday ? organization.openHours.wednesday : 'Not specified'}</small></CListGroupItem>\n                        <CListGroupItem><small>Thursday: {organization.openHours.thursday ? organization.openHours.thursday : 'Not specified'}</small></CListGroupItem>\n                        <CListGroupItem><small>Friday: {organization.openHours.friday ? organization.openHours.friday : 'Not specified'}</small></CListGroupItem>\n                        <CListGroupItem><small>Saturday: {organization.openHours.saturday ? organization.openHours.saturday : 'Not specified'}</small></CListGroupItem>\n                        <CListGroupItem><small>Sunday: {organization.openHours.sunday ? organization.openHours.sunday : 'Not specified'}</small></CListGroupItem>\n                    </CListGroup>\n                </CCol>\n            </CRow> : null}\n            <CCard className=\"mt-4\">\n                <CCardHeader>\n                    Description:\n                </CCardHeader>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <Editor\n                                apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                initialValue={decodeHTML(organization.description)}\n                                init={{\n                                    height: 300,\n                                    menubar: false,\n                                    plugins: [\n                                        'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                        'searchreplace wordcount visualblocks visualchars code',\n                                        'insertdatetime media nonbreaking table directionality',\n                                        'emoticons template paste textpattern imagetools codesample'\n                                    ],\n                                    toolbar: '',\n                                }}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n        </>\n    )\n}\n\nexport default OrganizationsDetail\n","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CImg, CCol, CRow, CInput, CBadge, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody }\n    from '@coreui/react'\nimport { OrganizationsList as CallOrganizationsList, OrganizationsEdit as CallOrganizationsEdit } from '../../../src/server/OrganizationsManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { freeSet } from '@coreui/icons'\nimport OrganizationsEdit from './OrganizationsEdit'\nimport OrganizationsDetail from './OrganizationsDetail'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst OrganizationsList = () => {\n    const [Organizations, setOrganizations] = useState([])\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempOrganizations, setTempOrganizations] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadOrganizationsList = async () => {\n        setLoading(true)\n        const response = await CallOrganizationsList()\n        const OrganizationsList = (await response.json()).data\n        console.log(OrganizationsList)\n        setOrganizations(OrganizationsList)\n        handleSearch(searchString, OrganizationsList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, OrganizationsList) => {\n        keyword = keyword.toLowerCase()\n        const OrganizationsArray = OrganizationsList ? OrganizationsList : Organizations\n        const temp = OrganizationsArray.filter(Organization => {\n            return Organization.name.toLowerCase().includes(keyword) || Organization.category.name.toLowerCase().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempOrganizations(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CallOrganizationsEdit(id, { isDeleted: 'true' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The Organization with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            await loadOrganizationsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false, type: 'delete' })\n    }\n\n    const handleIsPublic = async (id) => {\n        const response = await CallOrganizationsEdit(id, { isPublic: !modalInfo.isPublic + '' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The publicity status of Organization with id: ' + id + ' has been successfuly changed', type: 'success' }\n            ])\n            await loadOrganizationsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    useEffect(() => {\n        loadOrganizationsList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Icon</strong>,\n            selector: 'icon',\n            cell: row => row.icon ? <CImg style={{ width: '30px' }} src={row.icon} /> : 'No Icon'\n        },\n        {\n            name: <strong>Name</strong>,\n            selector: 'name',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Category</strong>,\n            selector: 'category.name',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Is Visible</strong>,\n            selector: 'isPublic',\n            sortable: true,\n            center: true,\n            cell: row => <CBadge color={row.isPublic ? 'success' : 'danger'} className=\"float-right\">{row.isPublic ? 'Yes' : 'No'}</CBadge>\n        },\n        {\n            name: <strong>Is Indigenous</strong>,\n            selector: 'isIndigenous',\n            sortable: true,\n            center: true,\n            cell: row => <CBadge color={'info'} className=\"float-right\">{row.isPublic ? 'Yes' : 'No'}</CBadge>\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, show: !modalInfo.show, type: 'detail' })}>\n                        {generateIcon('cilInfo')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, show: !modalInfo.show, type: 'edit' })}>\n                        {generateIcon('cilPencil')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, isPublic: row.isPublic, show: !modalInfo.show, type: 'isPublic' })}>\n                        {generateIcon('cilCloudUpload')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, show: !modalInfo.show, type: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                </div>,\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"6\">\n\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Organizations List\"\n                                columns={columns}\n                                data={tempOrganizations}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.type })\n                    setToastMessage([])\n                }}\n                color={modalInfo.type === 'delete' ? 'danger' : modalInfo.type === 'isPublic' ? 'warning' : 'info'}\n                size={(modalInfo.type === 'edit' || modalInfo.type === 'detail') ? 'xl' : ''}\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.type === 'delete' ? 'Delete Organization account' : modalInfo.type === 'edit' ? 'Edit Organization profile' : modalInfo.type === 'detail' ? 'Organization detail' : 'Change Publicity status'}</CModalTitle>\n                </CModalHeader>\n                {modalInfo.show ? <CModalBody>\n                    {modalInfo.type === 'delete' ? <div>Are you sure you want to delete <strong>{modalInfo.title}</strong>?</div> : modalInfo.type === 'isPublic' ? <div>Are you sure you want to change publicity status of <strong>{modalInfo.title}</strong>?</div> : null}\n                    {modalInfo.type === 'edit' ? <OrganizationsEdit loadOrganizationsList={loadOrganizationsList} organization={modalInfo} setOrganization={setModalInfo} setToastMessage={setToastMessage} toastMessages={toastMessages} /> : modalInfo.type === 'detail' ? <OrganizationsDetail organization={modalInfo} /> : null}\n                </CModalBody> : null}\n                {modalInfo.type === 'delete' || modalInfo.type === 'isPublic' ? <CModalFooter>\n                    <CButton color={modalInfo.type === 'delete' ? 'danger' : 'warning'} onClick={() => modalInfo.type === 'delete' ? handleDelete(modalInfo.id) : handleIsPublic(modalInfo.id)}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: false })}\n                    >Cancel</CButton>\n                </CModalFooter> : null}\n            </CModal>\n            {toastMessages.map(toastMessage => {\n                console.log(toastMessage)\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + Math.floor(Math.random() * 1000000)}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default OrganizationsList\n"],"sourceRoot":""}