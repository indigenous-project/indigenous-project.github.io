{"version":3,"sources":["views/services/ServicesAdd.js","server/CategoriesManagement.js","server/MediasManagement.js","server/ServicesManagement.js"],"names":["ServicesAdd","useState","categories","setCategories","mediaFile","setMediaFile","addingLoader","setaddingLoader","service","setService","toastMessages","setToastMessage","loadCategories","a","CallCategoriesList","response","json","Categories","data","handleAdd","ev","medias","preventDefault","addServiceCallback","mediaId","addObject","name","contact","email","phone","description","category","isPublic","toString","isIndigenous","console","log","AddService","ok","title","type","UploadMedia","useEffect","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","col","md","xs","onChange","files","custom","filter","map","_id","tag","checked","color","defaultChecked","size","toastMessage","position","show","autohide","fade","closeButton","Math","floor","random","bearerToken","localStorage","getItem","CategoriesList","fetch","GetUrl","mode","headers","Authorization","Accept","catch","error","message","CategoriesEdit","editObject","body","JSON","stringify","then","CategoriesDelete","CategoriesAdd","BUCKET_NAME","s3","AWS","S3","accessKeyId","secretAccessKey","MediasAdd","fileContent","callback","params","Bucket","Key","Body","ContentType","ACL","upload","err","extension","split","path","Location","jsonResult","UploadManyMedias","fileContents","promises","forEach","content","push","promise","Promise","all","pr","results","mediaIds","i","length","ServicesList","ServicesEdit"],"mappings":"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","file":"static/js/14.cca4654d.chunk.js","sourcesContent":["\n\nimport React, { useState, useEffect } from 'react'\nimport { CToaster, CToastBody, CToastHeader, CToast, CInputFile, CTextarea, CSwitch, CSelect, CForm, CButton, CFormGroup, CCard, CSpinner, CCardBody, CCardFooter, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio, CImg }\n    from '@coreui/react'\nimport { ServicesAdd as AddService } from '../../../src/server/ServicesManagement'\nimport { UploadMedia } from '../../../src/server/MediasManagement'\nimport { CategoriesList as CallCategoriesList } from '../../../src/server/CategoriesManagement'\n\n\n\nconst ServicesAdd = () => {\n    const [categories, setCategories] = useState([])\n    const [mediaFile, setMediaFile] = useState()\n    const [addingLoader, setaddingLoader] = useState(false)\n    const [service, setService] = useState(false)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadCategories = async () => {\n        const response = await CallCategoriesList()\n        const Categories = (await response.json()).data\n        setCategories(Categories)\n    }\n    const handleAdd = async (ev) => {\n        service.medias = []\n        ev.preventDefault()\n        setaddingLoader(true)\n        const addServiceCallback = async function (mediaId) {\n            if (mediaId !== -1) {\n                let addObject = {\n                    name: service.name,\n                    contact: { email: service.contact.email, phone: service.contact.phone },\n                    description: service.description,\n                    category: service.category,\n                    isPublic: service.isPublic ? service.isPublic.toString() : 'true',\n                    isIndigenous: service.isIndigenous ? service.isIndigenous.toString() : 'false',\n                    medias: [mediaId]\n                }\n                console.log('addObject', addObject)\n                const response = await AddService(addObject)\n                if (response.ok) {\n                    setToastMessage([\n                        { title: 'Congrats!', description: 'The ' + service.name + ' service has been successfuly created', type: 'success' }\n                    ])\n                }\n                else {\n                    setToastMessage([\n                        { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n                    ])\n                }\n            }\n            setaddingLoader(false)\n        }\n        await UploadMedia(mediaFile, setToastMessage, addServiceCallback)\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'Add new service'}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"service\" onSubmit={handleAdd}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Service Name</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name...\" onInput={(ev) => setService({ ...service, name: ev.target.value })} autoComplete=\"name\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"name\">Phone Number:</CLabel>\n                                        <CInput type=\"number\" id=\"phone\" placeholder=\"Enter phone number...\" onInput={(ev) => setService({ ...service, contact: { ...service.contact, phone: ev.target.value } })} autoComplete=\"phone\" />\n                                    </CCol>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"name\">Email:</CLabel>\n                                        <CInput type=\"email\" id=\"email\" placeholder=\"Enter email...\" onInput={(ev) => setService({ ...service, contact: { ...service.contact, email: ev.target.value } })} autoComplete=\"email\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CLabel col md=\"1\" htmlFor=\"file-input\">Image/Video</CLabel>\n                                    <CCol xs=\"12\" md=\"9\" className=\"ml-n3 mt-1\">\n                                        <CInputFile id=\"file-input\" required name=\"file-input\" onChange={(ev) => setMediaFile(ev.target.files[0])} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"select\">Category</CLabel>\n                                    <CCol xs=\"12\" md=\"3\">\n                                        <CSelect custom name=\"category\" className=\"ml-n3\" id=\"category\" required onChange={(ev) => { setService({ ...service, category: ev.target.value }) }}>\n                                            {categories.filter(category => category.type === 'general').map(category => {\n                                                return <option key={category._id} value={category._id}>{category.name}</option>\n                                            })}\n                                        </CSelect>\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label mr-n5\">\n                                        I want this service to be visible:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n5\">\n                                        <CSwitch\n                                            onChange={(ev) => setService({ ...service, isPublic: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                            defaultChecked\n                                        />\n                                    </CCol>\n                                    <CCol tag=\"label\" sm=\"2\" className=\"col-form-label\">\n                                        I this service Indigenous:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n4\">\n                                        <CSwitch\n                                            onChange={(ev) => setService({ ...service, isIndigenous: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\n                                    <CTextarea onInput={(ev) => setService({ ...service, description: ev.target.value })}></CTextarea>\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Add Service</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {addingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default ServicesAdd\n","// importing GetUrl from the server\nimport GetUrl from \"../server/ApiEndpoints\";\n\n// Getting the token from the local storage\nlet bearerToken = \"Bearer \" + localStorage.getItem(\"HDI-token\");\n\n// Getting the categories list using url from the server by using GET method and if its not successful it will display an error message\nconst CategoriesList = async function () {\n    return await fetch(GetUrl(\"CategoriesList\"), {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        }\n    }).catch(error => {\n        console.log(error.message);\n    });\n};\n\n// Editing the categories list using url from the server by using PATCH method and also stringifying the object and if its not successful it will display an error message\nconst CategoriesEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesEdit\") + \"/\" + id, {\n        method: \"PATCH\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error);\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\nconst CategoriesDelete = async function (id, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesDelete\") + \"/\" + id, {\n        method: \"DELETE\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        }\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error);\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\n// Adding a new Category. if its not successful it will display an error message\nconst CategoriesAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesAdd\"), {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\n// exporting the categoriesList and categoriesEdit functions\nexport { CategoriesList, CategoriesEdit, CategoriesAdd, CategoriesDelete };","import GetUrl from '../server/ApiEndpoints'\nimport AWS from 'aws-sdk'\n\nconst ID = 'AKIAWBK3UNFZVVF7OF4B';\nconst SECRET = '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';\nconst BUCKET_NAME = 'indigenous-images';\nconst s3 = new AWS.S3({\n    accessKeyId: ID,\n    secretAccessKey: SECRET\n});\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\nconst MediasAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl('MediasAdd'), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\nconst UploadMedia = async function (fileContent, setToastMessage, callback) {\n    const params = {\n        Bucket: BUCKET_NAME,\n        Key: Math.floor(Math.random() * 10000000000).toString(),\n        Body: fileContent,\n        ContentType: 'image/jpeg',\n        ACL: 'public-read-write'\n    };\n\n    s3.upload(params, async function (err, data) {\n        if (err) {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request: ' + err, type: 'danger' }\n            ])\n        }\n        console.log(`File uploaded successfully.`, data);\n        let response = await MediasAdd({ type: 'image', extension: '.' + fileContent.name.split('.')[1], path: data.Location }, setToastMessage)\n        if (response.ok) {\n            let jsonResult = await response.json()\n            await callback(jsonResult.data._id)\n        }\n        else {\n            await callback(-1)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request: ' + err, type: 'danger' }\n            ])\n        }\n    })\n}\n\nconst UploadManyMedias = async function (fileContents, setToastMessage, callback) {\n    let promises = []\n    fileContents.forEach(fileContent => {\n        const params = {\n            Bucket: BUCKET_NAME,\n            Key: Math.floor(Math.random() * 10000000000).toString(),\n            Body: fileContent.content,\n            ContentType: 'image/jpeg',\n            ACL: 'public-read-write'\n        };\n        promises.push({ type: fileContent.type, promise: s3.upload(params).promise() })\n    })\n    Promise.all(promises.map(pr => pr.promise)).then(async function (results) {\n        let mediaIds = []\n        for (let i = 0; i < results.length; i++) {\n            console.log(`File uploaded successfully.`, results[i]);\n            if (fileContents[i].type !== 'icon') {\n                let response = await MediasAdd({ type: 'image', extension: '.jpg', path: results[i].Location }, setToastMessage)\n                if (response.ok) {\n                    let jsonResult = await response.json()\n                    mediaIds.push(jsonResult.data._id)\n                }\n                else {\n                    setToastMessage([\n                        { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n                    ])\n                    return\n                }\n            }\n            else\n                mediaIds.push(results[i].Location)\n        }\n        await callback(mediaIds)\n    });\n}\n\nexport { UploadMedia, UploadManyMedias }","import GetUrl from '../server/ApiEndpoints'\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\nconst ServicesAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl('ServicesAdd'), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\nconst ServicesList = async function () {\n    return await fetch(GetUrl('ServicesList'), {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst ServicesDetail = async function (id) {\n    return await fetch(GetUrl('ServicesList') + '/' + id, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst ServicesEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl('ServicesEdit') + '/' + id, {\n        method: 'PATCH',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json'\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\n\nexport { ServicesList, ServicesEdit, ServicesDetail, ServicesAdd }"],"sourceRoot":""}