{"version":3,"sources":["views/posts/PostsEdit.js","views/posts/PostsDetail.js","views/posts/PostsList.js"],"names":["PostsEdit","post","setPost","setToastMessage","loadPostsList","toastMessages","useState","categories","setCategories","editingLoader","setEditingLoader","mediaFile","setMediaFile","encodeHTML","str","buf","i","length","unshift","charCodeAt","join","decodeHTML","replace","match","dec","String","fromCharCode","handleEdit","ev","a","preventDefault","editPostCallback","mediaId","editObject","title","description","isPublic","toString","category","medias","EditPost","_id","ok","type","UploadMedia","loadCategories","CallCategoriesList","response","json","Categories","data","useEffect","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","col","md","xs","name","onChange","files","custom","filter","map","tag","checked","color","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","content","editor","size","generateIcon","iconName","freeSet","PostsDetail","console","log","owner","email","createdAt","updatedAt","likeCount","shareCount","seenCount","style","maxHeight","maxWidth","marginTop","src","path","PostsList","Posts","setPosts","show","modalInfo","setModalInfo","tempPosts","setTempPosts","searchString","setSearchString","loading","setLoading","CallPostsList","handleSearch","keyword","toLowerCase","temp","Post","includes","sort","b","reverse","handleDelete","CallPostsEdit","isDeleted","handleIsPublic","columns","selector","sortable","left","cell","split","center","onClick","highlightOnHover","pagination","progressPending","onClosed","closeButton","toastMessage","position","autohide","fade","Math","floor","random"],"mappings":"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","file":"static/js/31.4445ccda.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { CForm, CButton, CFormGroup, CSelect, CCard, CInputFile, CSpinner, CCardBody, CCardFooter, CSwitch, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio, CAlert }\n    from '@coreui/react'\nimport { CategoriesList as CallCategoriesList } from '../../../src/server/CategoriesManagement'\nimport { PostsEdit as EditPost } from '../../../src/server/PostsManagement'\nimport { Editor } from '@tinymce/tinymce-react';\nimport { UploadMedia } from '../../../src/server/MediasManagement'\n\n\nconst PostsEdit = ({ post, setPost, setToastMessage, toastMessages, loadPostsList }) => {\n    const [categories, setCategories] = useState([])\n    const [editingLoader, setEditingLoader] = useState(false)\n    const [mediaFile, setMediaFile] = useState()\n    const encodeHTML = str => {\n        if (!str)\n            return ''\n        let buf = [];\n\n        for (var i = str.length - 1; i >= 0; i--) {\n            buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));\n        }\n\n        return buf.join('');\n    }\n\n    const decodeHTML = str => {\n        return str.replace(/&#(\\d+);/g, function (match, dec) {\n            return String.fromCharCode(dec);\n        });\n    }\n    const handleEdit = async (ev) => {\n        ev.preventDefault()\n        setEditingLoader(true)\n        const editPostCallback = async function (mediaId) {\n            if (mediaId !== -1) {\n                let editObject = {\n                    title: post.title,\n                    description: encodeHTML(decodeHTML(post.description)),\n                    isPublic: post.isPublic.toString(),\n                    category: post.category\n                }\n                if (mediaId !== -2) {\n                    editObject.medias = [mediaId]\n                }\n                const response = await EditPost(post._id, editObject, setToastMessage)\n                if (response.ok) {\n                    loadPostsList()\n                    setToastMessage([\n                        { title: 'Congrats!', description: 'The information of post with id: ' + post._id + ' has been successfuly changed', type: 'success' }\n                    ])\n                }\n                else {\n                    setToastMessage([\n                        { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n                    ])\n                }\n            }\n            setEditingLoader(false)\n        }\n        if (mediaFile)\n            await UploadMedia(mediaFile, setToastMessage, editPostCallback)\n        else\n            editPostCallback(-2)\n    }\n    const loadCategories = async () => {\n        const response = await CallCategoriesList()\n        const Categories = (await response.json()).data\n        setCategories(Categories)\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'ID: ' + post._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"post\" onSubmit={handleEdit}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Post Title</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name...\" onInput={(ev) => setPost({ ...post, title: ev.target.value })} value={post.title} autoComplete=\"name\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CLabel col md=\"2\" htmlFor=\"file-input\">Image/Video</CLabel>\n                                    <CCol xs=\"12\" md=\"9\" className=\"ml-n3 mt-1\">\n                                        <CInputFile id=\"file-input\" name=\"file-input\" onChange={(ev) => setMediaFile(ev.target.files[0])} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"select\">Category</CLabel>\n                                    <CCol xs=\"12\" md=\"3\">\n                                        <CSelect custom name=\"category\" className=\"ml-n3\" id=\"category\" required onChange={(ev) => { setPost({ ...post, category: ev.target.value }) }} value={post.category._id}>\n                                            {categories.filter(category => category.type === 'general').map(category => {\n                                                return <option key={category._id} value={category._id}>{category.name}</option>\n                                            })}\n                                        </CSelect>\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label\">\n                                        I want to publish this post:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n5\">\n                                        <CSwitch\n                                            onChange={(ev) => setPost({ ...post, isPublic: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                            checked={post.isPublic ? true : false}\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\n                                    <Editor\n                                        apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                        initialValue={decodeHTML(post.description)}\n                                        init={{\n                                            height: 300,\n                                            menubar: false,\n                                            plugins: [\n                                                'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                                'searchreplace wordcount visualblocks visualchars code',\n                                                'insertdatetime media nonbreaking table directionality',\n                                                'emoticons template paste textpattern imagetools codesample'\n                                            ],\n                                            toolbar: 'bold italic sizeselect fontselect fontsizeselect | hr alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | insertfile undo redo | forecolor backcolor emoticons | ',\n                                        }}\n                                        onEditorChange={(content, editor) => {\n                                            setPost({ ...post, description: content })\n                                        }}\n                                    />\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Edit Post</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {editingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n        </>\n    )\n}\n\nexport default PostsEdit\n","import React from 'react'\nimport { CBadge, CCarousel, CCarouselInner, CCarouselItem, CCarouselControl, CListGroup, CListGroupItem, CCard, CCardBody, CCardFooter, CCardHeader, CCol, CProgress, CRow, CCallout, CImg }\n    from '@coreui/react'\nimport { freeSet } from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport { Editor } from '@tinymce/tinymce-react';\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} className=\"mr-3 ml-1\" />)\n}\nconst decodeHTML = str => {\n    return str.replace(/&#(\\d+);/g, function (match, dec) {\n        return String.fromCharCode(dec);\n    });\n}\nconst PostsDetail = ({ post }) => {\n    console.log('post: ', post)\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">ID: {post._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            {post ? <CRow>\n                <CCol sm=\"6\">\n                    <CListGroup>\n                        <CListGroupItem><strong>Title: </strong>{post.title}</CListGroupItem>\n                        <CListGroupItem><strong>Category: </strong>{post.category ? post.category.name : 'no category specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Author: </strong>{post.owner ? post.owner.email : 'no owner specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Is this post visible for users: </strong><CBadge color={post.isPublic ? 'success' : 'danger'} className=\"ml-2 p-2\">{post.isPublic ? 'Yes' : 'No'}</CBadge></CListGroupItem>\n                        <CListGroupItem><strong>Posted At: </strong>{post.createdAt ? post.createdAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                        <CListGroupItem><strong>Last Update At: </strong>{post.updatedAt ? post.updatedAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                    </CListGroup>\n                </CCol>\n                <CCol sm=\"6\">\n                    <CListGroup>\n                        <CListGroupItem>{post.likeCount}{generateIcon('cilThumbUp')}{post.shareCount}{generateIcon('cilShare')}{post.seenCount}{generateIcon('cilCast')}</CListGroupItem>\n                    </CListGroup>\n                    {post.medias.length > 0 ? <CImg style={{ maxHeight: \"300px\", maxWidth: \"100%\", marginTop: \"10px\" }} src={post.medias[0].path} /> : null}\n                </CCol>\n            </CRow> : null}\n            <CCard className=\"mt-4\">\n                <CCardHeader>\n                    Description:\n                </CCardHeader>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <Editor\n                                apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                initialValue={decodeHTML(post.description)}\n                                init={{\n                                    height: 300,\n                                    menubar: false,\n                                    plugins: [\n                                        'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                        'searchreplace wordcount visualblocks visualchars code',\n                                        'insertdatetime media nonbreaking table directionality',\n                                        'emoticons template paste textpattern imagetools codesample'\n                                    ],\n                                    toolbar: '',\n                                }}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n        </>\n    )\n}\n\nexport default PostsDetail\n","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow, CInput, CBadge, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody }\n    from '@coreui/react'\nimport { PostsList as CallPostsList, PostsEdit as CallPostsEdit } from '../../../src/server/PostsManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { freeSet } from '@coreui/icons'\nimport PostsEdit from './PostsEdit'\nimport PostsDetail from './PostsDetail'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst PostsList = () => {\n    const [Posts, setPosts] = useState([])\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempPosts, setTempPosts] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadPostsList = async () => {\n        setLoading(true)\n        const response = await CallPostsList()\n        const PostsList = (await response.json()).data\n        console.log(PostsList)\n        setPosts(PostsList)\n        handleSearch(searchString, PostsList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, PostsList) => {\n        keyword = keyword.toLowerCase()\n        const PostsArray = PostsList ? PostsList : Posts\n        const temp = PostsArray.filter(Post => {\n            return Post.title.toLowerCase().includes(keyword) || Post.owner.email.toLowerCase().includes(keyword) || Post.createdAt.toLowerCase().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempPosts(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CallPostsEdit(id, { isDeleted: 'true' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The Post with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            await loadPostsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false, type: 'delete' })\n    }\n\n    const handleIsPublic = async (id) => {\n        const response = await CallPostsEdit(id, { isPublic: !modalInfo.isPublic + '' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The publicity status of Post with id: ' + id + ' has been successfuly changed', type: 'success' }\n            ])\n            await loadPostsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    useEffect(() => {\n        loadPostsList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Title</strong>,\n            selector: 'title',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Posted Date</strong>,\n            selector: 'createdAt',\n            sortable: true,\n            left: true,\n            cell: row => row.createdAt.split('T')[0]\n        },\n        {\n            name: <strong>Author</strong>,\n            selector: 'owner.email',\n            sortable: true,\n            center: true,\n        },\n        {\n            name: <strong>Is Visible</strong>,\n            selector: 'isPublic',\n            sortable: true,\n            center: true,\n            cell: row => <CBadge color={row.isPublic ? 'success' : 'danger'} className=\"float-right\">{row.isPublic ? 'Yes' : 'No'}</CBadge>\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, show: !modalInfo.show, type: 'detail' })}>\n                        {generateIcon('cilInfo')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, show: !modalInfo.show, type: 'edit' })}>\n                        {generateIcon('cilPencil')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, isPublic: row.isPublic, show: !modalInfo.show, type: 'isPublic' })}>\n                        {generateIcon('cilCloudUpload')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, show: !modalInfo.show, type: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                </div>,\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"6\">\n\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Posts List\"\n                                columns={columns}\n                                data={tempPosts}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.type })\n                    setToastMessage([])\n                }}\n                color={modalInfo.type === 'delete' ? 'danger' : modalInfo.type === 'isPublic' ? 'warning' : 'info'}\n                size={(modalInfo.type === 'edit' || modalInfo.type === 'detail') ? 'xl' : ''}\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.type === 'delete' ? 'Delete Post account' : modalInfo.type === 'edit' ? 'Edit Post profile' : modalInfo.type === 'detail' ? 'Post detail' : 'Change Publicity status'}</CModalTitle>\n                </CModalHeader>\n                {modalInfo.show ? <CModalBody>\n                    {modalInfo.type === 'delete' ? <div>Are you sure you want to delete <strong>{modalInfo.title}</strong>?</div> : modalInfo.type === 'isPublic' ? <div>Are you sure you want to change publicity status of <strong>{modalInfo.title}</strong>?</div> : null}\n                    {modalInfo.type === 'edit' ? <PostsEdit loadPostsList={loadPostsList} post={modalInfo} setPost={setModalInfo} setToastMessage={setToastMessage} toastMessages={toastMessages} /> : modalInfo.type === 'detail' ? <PostsDetail post={modalInfo} /> : null}\n                </CModalBody> : null}\n                {modalInfo.type === 'delete' || modalInfo.type === 'isPublic' ? <CModalFooter>\n                    <CButton color={modalInfo.type === 'delete' ? 'danger' : 'warning'} onClick={() => modalInfo.type === 'delete' ? handleDelete(modalInfo.id) : handleIsPublic(modalInfo.id)}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: false })}\n                    >Cancel</CButton>\n                </CModalFooter> : null}\n            </CModal>\n            {toastMessages.map(toastMessage => {\n                console.log(toastMessage)\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + Math.floor(Math.random() * 1000000)}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default PostsList\n"],"sourceRoot":""}