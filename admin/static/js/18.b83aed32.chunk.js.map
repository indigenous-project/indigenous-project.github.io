{"version":3,"sources":["views/categories/CategoriesEdit.js","views/categories/CategoriesList.js","server/CategoriesManagement.js"],"names":["CategoriesEdit","Category","setCategory","setToastMessage","loadCategoriesList","toastMessages","useState","editingLoader","setEditingLoader","handleEdit","ev","a","preventDefault","editObject","name","type","EditCategory","_id","ok","title","description","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","placeholder","onInput","target","value","autoComplete","required","row","md","variant","inline","onChange","checked","size","onClick","show","generateIcon","iconName","content","freeSet","CategoriesList","Categories","setCategories","modalInfo","setModalInfo","tempCategories","setTempCategories","searchString","setSearchString","loading","setLoading","CallCategoriesList","response","json","data","console","log","handleSearch","keyword","toLowerCase","temp","filter","includes","sort","b","createdAt","reverse","handleDelete","CategoriesDelete","useEffect","columns","selector","cell","icon","style","width","src","sortable","left","modalType","highlightOnHover","pagination","progressPending","onClosed","color","closeButton","map","toastMessage","position","autohide","fade","Math","floor","random","bearerToken","localStorage","getItem","fetch","GetUrl","mode","headers","Authorization","Accept","catch","error","message","body","JSON","stringify","then","CategoriesAdd","addObject"],"mappings":"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","file":"static/js/18.b83aed32.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { CForm, CButton, CFormGroup, CCard, CSpinner, CCardBody, CCardFooter, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio }\n    from '@coreui/react'\nimport { CategoriesEdit as EditCategory } from '../../../src/server/CategoriesManagement'\n\nconst CategoriesEdit = ({ Category, setCategory, setToastMessage, toastMessages, loadCategoriesList }) => {\n    const [editingLoader, setEditingLoader] = useState(false)\n    const handleEdit = async (ev) => {\n        ev.preventDefault()\n        setEditingLoader(true)\n        let editObject = {\n            name: Category.name,\n            type: Category.type,\n        }\n        const response = await EditCategory(Category._id, editObject, setToastMessage)\n        if (response.ok) {\n            loadCategoriesList()\n            setToastMessage([\n                { title: 'Congrats!', description: 'The information of Category with id: ' + Category._id + ' has been successfuly changed', type: 'success' }\n            ])\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        setEditingLoader(false)\n    }\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'ID: ' + Category._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"post\" onSubmit={handleEdit}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Category Name</CLabel>\n                                    <CInput type=\"text\" id=\"name\" placeholder=\"Enter Name..\" onInput={(ev) => setCategory({ ...Category, name: ev.target.value })} value={Category.name ? Category.name : ''} autoComplete=\"name\" required />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol md=\"12\">\n                                        <CLabel>Type</CLabel>\n                                    </CCol>\n                                    <CCol md=\"12\">\n                                        <CFormGroup variant=\"checkbox\" inline>\n                                            <CInputRadio className=\"form-check-input\" id=\"type-general\" onChange={(ev) => setCategory({ ...Category, type: 'general' })} checked={Category.type === 'general' ? true : false} name=\"radios\" value=\"general\" required />\n                                            <CLabel variant=\"checkbox\" htmlFor=\"type-general\">General</CLabel>\n                                        </CFormGroup>\n                                        <CFormGroup variant=\"checkbox\" inline>\n                                            <CInputRadio className=\"form-check-input\" id=\"type-organization\" onChange={(ev) => setCategory({ ...Category, type: 'organization' })} checked={Category.type === 'organization' ? true : false} name=\"radios\" value=\"organization\" />\n                                            <CLabel variant=\"checkbox\" htmlFor=\"type-organization\">Organization</CLabel>\n                                        </CFormGroup>\n                                        <CFormText className=\"help-block\">Please specify the type of the Category</CFormText>\n                                    </CCol>\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Apply Edit</CButton> <CLink size=\"sm\" onClick={() => setCategory({ show: !Category.show, type: Category.type })} className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {editingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n        </>\n    )\n}\n\nexport default CategoriesEdit\n","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow, CInput, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody, CImg }\n    from '@coreui/react'\nimport { CategoriesList as CallCategoriesList, CategoriesDelete } from '../../../src/server/CategoriesManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { cibMacys, freeSet } from '@coreui/icons'\nimport CategoriesEdit from './CategoriesEdit'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst CategoriesList = () => {\n    const [Categories, setCategories] = useState([])\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempCategories, setTempCategories] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadCategoriesList = async () => {\n        setLoading(true)\n        const response = await CallCategoriesList()\n        const CategoriesList = (await response.json()).data\n        console.log(CategoriesList)\n        setCategories(CategoriesList)\n        handleSearch(searchString, CategoriesList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, CategoriesList) => {\n        keyword = keyword.toLowerCase()\n        const CategoriesArray = CategoriesList ? CategoriesList : Categories\n        const temp = CategoriesArray.filter(Category => {\n            return Category.name.toLowerCase().includes(keyword) || Category.type.toLowerCase().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempCategories(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CategoriesDelete(id, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The Category with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            await loadCategoriesList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    useEffect(() => {\n        loadCategoriesList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Icon</strong>,\n            selector: 'icon',\n            cell: row => row.icon ? <CImg style={{ width: '30px' }} src={row.icon} /> : 'No Icon'\n        },\n        {\n            name: <strong>Name</strong>,\n            selector: 'name',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Type</strong>,\n            selector: 'type',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                row.type !== 'general' ? <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, show: !modalInfo.show, modalType: 'edit' })}>\n                        {generateIcon('cilPencil')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, name: row.name, show: !modalInfo.show, modalType: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                </div > : null\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"6\">\n\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Categories List\"\n                                columns={columns}\n                                data={tempCategories}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.modalType })\n                    setToastMessage([])\n                }}\n                color={modalInfo.modalType === 'delete' ? 'danger' : 'info'}\n                size=\"\"\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.modalType === 'delete' ? 'Delete Category account' : modalInfo.modalType === 'edit' ? 'Edit Category profile' : 'Category info'}</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    {modalInfo.modalType === 'delete' ? <div>Are you sure you want to delete <strong>{modalInfo.name}</strong> category?</div> : null}\n                    {modalInfo.modalType === 'edit' ? <CategoriesEdit loadCategoriesList={loadCategoriesList} Category={modalInfo} setCategory={setModalInfo} setToastMessage={setToastMessage} toastMessages={toastMessages} /> : null}\n                </CModalBody>\n                {modalInfo.modalType === 'delete' ? <CModalFooter>\n                    <CButton color={'danger'} onClick={() => handleDelete(modalInfo.id)}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: !modalInfo.show })}\n                    >Cancel</CButton>\n                </CModalFooter> : null}\n            </CModal>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default CategoriesList\n","// importing GetUrl from the server\nimport GetUrl from \"../server/ApiEndpoints\";\n\n// Getting the token from the local storage\nlet bearerToken = \"Bearer \" + localStorage.getItem(\"HDI-token\");\n\n// Getting the categories list using url from the server by using GET method and if its not successful it will display an error message\nconst CategoriesList = async function () {\n    return await fetch(GetUrl(\"CategoriesList\"), {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        }\n    }).catch(error => {\n        console.log(error.message);\n    });\n};\n\n// Editing the categories list using url from the server by using PATCH method and also stringifying the object and if its not successful it will display an error message\nconst CategoriesEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesEdit\") + \"/\" + id, {\n        method: \"PATCH\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error);\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\nconst CategoriesDelete = async function (id, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesDelete\") + \"/\" + id, {\n        method: \"DELETE\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        }\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error);\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\n// Adding a new Category. if its not successful it will display an error message\nconst CategoriesAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesAdd\"), {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\n// exporting the categoriesList and categoriesEdit functions\nexport { CategoriesList, CategoriesEdit, CategoriesAdd, CategoriesDelete };"],"sourceRoot":""}