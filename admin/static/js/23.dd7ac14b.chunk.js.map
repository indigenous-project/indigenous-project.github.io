{"version":3,"sources":["server/RepliesManagement.js","views/discussions/RepliesList.js"],"names":["bearerToken","localStorage","getItem","RepliesEdit","id","editObject","setToastMessage","a","fetch","GetUrl","method","mode","headers","body","JSON","stringify","then","response","catch","error","console","log","title","description","type","generateIcon","iconName","content","freeSet","RepliesList","discussion","loadDiscussionsList","useState","show","modalInfo","setModalInfo","tempReplies","setTempReplies","searchString","setSearchString","loading","setLoading","loadRepliesList","replies","handleSearch","keyword","toLowerCase","temp","filter","Reply","text","includes","owner","firstName","lastName","createdAt","toString","sort","b","reverse","handleDelete","CallRepliesEdit","isDeleted","ok","item","_id","handleIsPublic","isPublic","find","useEffect","columns","name","selector","sortable","left","cell","row","category","center","split","color","className","onClick","sm","placeholder","onInput","ev","target","value","data","highlightOnHover","pagination","progressPending","onClosed","size","closeButton"],"mappings":"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","file":"static/js/23.dd7ac14b.chunk.js","sourcesContent":["import GetUrl from '../server/ApiEndpoints'\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\nconst RepliesAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl('RepliesAdd'), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\nconst RepliesEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl('RepliesEdit') + '/' + id, {\n        method: 'PATCH',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json'\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\n\nexport { RepliesEdit, RepliesAdd }","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow, CInput, CBadge, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody }\n    from '@coreui/react'\nimport { RepliesEdit as CallRepliesEdit } from '../../server/RepliesManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { freeSet } from '@coreui/icons'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst RepliesList = ({ discussion, setToastMessage, loadDiscussionsList }) => {\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempReplies, setTempReplies] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const loadRepliesList = async () => {\n        setLoading(true)\n        const RepliesList = discussion.replies\n        handleSearch(searchString, RepliesList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, RepliesList) => {\n        keyword = keyword.toLowerCase()\n        const RepliesArray = RepliesList ? RepliesList : discussion.replies\n        const temp = RepliesArray.filter(Reply => {\n            return Reply.text.toLowerCase().includes(keyword) || Reply.owner.firstName.toLowerCase().includes(keyword) || Reply.owner.lastName.toLowerCase().includes(keyword) || Reply.createdAt.toString().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempReplies(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CallRepliesEdit(id, { isDeleted: 'true' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The Reply with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            discussion.replies = discussion.replies.filter(function (item) {\n                return item._id !== id\n            })\n            await loadRepliesList()\n            loadDiscussionsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false, type: 'delete' })\n    }\n\n    const handleIsPublic = async (id) => {\n        const response = await CallRepliesEdit(id, { isPublic: !modalInfo.isPublic + '' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The publicity status of Reply with id: ' + id + ' has been successfuly changed', type: 'success' }\n            ])\n            let rep = discussion.replies.find(function (item) {\n                return item._id === id\n            })\n            rep.isPublic = !modalInfo.isPublic\n            await loadRepliesList()\n            loadDiscussionsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    useEffect(() => {\n        loadRepliesList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Text</strong>,\n            selector: 'text',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Category</strong>,\n            selector: 'category',\n            sortable: true,\n            left: true,\n            cell: row => row.category ? row.category.name : 'Not specified'\n        },\n        {\n            name: <strong>Replied at</strong>,\n            selector: 'date',\n            sortable: true,\n            center: true,\n            cell: row => row.createdAt.split('T')[0]\n        },\n        {\n            name: <strong>Author</strong>,\n            selector: 'owner',\n            sortable: true,\n            center: true,\n            cell: row => (row.owner.firstName ? row.owner.firstName : '') + ' ' + (row.owner.lastName ? row.owner.lastName : '')\n        },\n        {\n            name: <strong>Is Visible</strong>,\n            selector: 'isPublic',\n            sortable: true,\n            center: true,\n            cell: row => <CBadge color={row.isPublic ? 'success' : 'danger'} className=\"float-right\">{row.isPublic ? 'Yes' : 'No'}</CBadge>\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, text: row.text, isPublic: row.isPublic, show: !modalInfo.show, type: 'isPublic' })}>\n                        {generateIcon('cilCloudUpload')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, text: row.text, show: !modalInfo.show, type: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                </div>,\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"6\">\n\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Replies List\"\n                                columns={columns}\n                                data={tempReplies}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.type })\n                }}\n                color={modalInfo.type === 'delete' ? 'danger' : modalInfo.type === 'isPublic' ? 'warning' : 'info'}\n                size={(modalInfo.type === 'edit' || modalInfo.type === 'detail') ? 'xl' : ''}\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.type === 'delete' ? 'Delete Reply account' : modalInfo.type === 'edit' ? 'Edit Reply profile' : modalInfo.type === 'detail' ? 'Reply detail' : 'Change Publicity status'}</CModalTitle>\n                </CModalHeader>\n                {modalInfo.show ? <CModalBody>\n                    {modalInfo.type === 'delete' ? <div>Are you sure you want to delete <strong>{modalInfo.text}</strong>?</div> : modalInfo.type === 'isPublic' ? <div>Are you sure you want to change publicity status of <strong>{modalInfo.text}</strong>?</div> : null}\n                </CModalBody> : null}\n                {modalInfo.type === 'delete' || modalInfo.type === 'isPublic' ? <CModalFooter>\n                    <CButton color={modalInfo.type === 'delete' ? 'danger' : 'warning'} onClick={() => modalInfo.type === 'delete' ? handleDelete(modalInfo.id) : handleIsPublic(modalInfo.id)}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: false })}\n                    >Cancel</CButton>\n                </CModalFooter> : null}\n            </CModal>\n        </>\n    )\n}\n\nexport default RepliesList\n"],"sourceRoot":""}