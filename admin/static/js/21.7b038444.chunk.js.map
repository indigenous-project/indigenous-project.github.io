{"version":3,"sources":["server/CommentsManagement.js","views/comments/CommentsList.js"],"names":["bearerToken","localStorage","getItem","CommentsList","a","fetch","GetUrl","method","mode","headers","catch","error","console","log","message","CommentsEdit","id","editObject","setToastMessage","body","JSON","stringify","then","response","title","description","type","generateIcon","iconName","content","freeSet","useState","Comments","setComments","show","modalInfo","setModalInfo","tempComments","setTempComments","searchString","setSearchString","loading","setLoading","toastMessages","loadCommentsList","CallCommentsList","json","data","handleSearch","keyword","toLowerCase","temp","filter","Comment","text","includes","sort","b","createdAt","reverse","handleDelete","CallCommentsEdit","isDeleted","ok","handleIsPublic","isPublic","toString","useEffect","columns","name","selector","sortable","left","cell","row","replace","color","className","onClick","_id","sm","placeholder","onInput","ev","target","value","highlightOnHover","pagination","progressPending","onClosed","closeButton","map","toastMessage","position","autohide","fade","Math","floor","random"],"mappings":"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","file":"static/js/21.7b038444.chunk.js","sourcesContent":["import GetUrl from '../server/ApiEndpoints'\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\nconst CommentsList = async function () {\n    return await fetch(GetUrl('CommentsList'), {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst CommentsEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl('CommentsEdit') + '/' + id, {\n        method: 'PATCH',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json'\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\n\nexport { CommentsList, CommentsEdit }","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow, CInput, CBadge, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody }\n    from '@coreui/react'\nimport { CommentsList as CallCommentsList, CommentsEdit as CallCommentsEdit } from '../../../src/server/CommentsManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { freeSet } from '@coreui/icons'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst CommentsList = () => {\n    const [Comments, setComments] = useState([])\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempComments, setTempComments] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadCommentsList = async () => {\n        setLoading(true)\n        const response = await CallCommentsList()\n        const CommentsList = (await response.json()).data\n        console.log(CommentsList)\n        setComments(CommentsList)\n        handleSearch(searchString, CommentsList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, CommentsList) => {\n        keyword = keyword.toLowerCase()\n        const CommentsArray = CommentsList ? CommentsList : Comments\n        const temp = CommentsArray.filter(Comment => {\n            return Comment.text.toLowerCase().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempComments(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CallCommentsEdit(id, { isDeleted: 'true' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The Comment with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            await loadCommentsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    const handleIsPublic = async (id) => {\n        const response = await CallCommentsEdit(id, { isPublic: (!modalInfo.isPublic).toString() })\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The public status of Comment with id: ' + id + ' has been successfuly changed', type: 'success' }\n            ])\n            await loadCommentsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    useEffect(() => {\n        loadCommentsList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Text</strong>,\n            selector: 'text',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Author</strong>,\n            selector: 'owner',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Date</strong>,\n            selector: 'createdAt',\n            sortable: true,\n            left: true,\n            cell: row => row.createdAt.replace('T', ' ').replace('Z', '')\n        },\n        {\n            name: <strong>Is Public</strong>,\n            selector: 'isPublic',\n            sortable: true,\n            cell: row => <CBadge color={row.isPublic ? 'success' : 'danger'} className=\"float-right\">{row.isPublic ? 'Yes' : 'No'}</CBadge>\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, text: row.text, isPublic: row.isPublic, show: !modalInfo.show, type: 'isPublic' })}>\n                        {generateIcon('cilCloudUpload')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, text: row.text, show: !modalInfo.show, type: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                </div>,\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Comments List\"\n                                columns={columns}\n                                data={tempComments}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.type })\n                    setToastMessage([])\n                }}\n                color={modalInfo.type === 'delete' ? 'danger' : 'info'}\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.type === 'delete' ? 'Delete Comment' : 'Change public status of the comment'}</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    {modalInfo.type === 'delete' ? <div>Are you sure you want to delete:<h4><strong>\"{modalInfo.text}\"</strong></h4></div> : <div>Are you sure you want to change the public status of: <h4><strong>\"{modalInfo.text}\"</strong> ?</h4></div>}\n                </CModalBody>\n                <CModalFooter>\n                    <CButton color={modalInfo.type === 'delete' ? 'danger' : 'info'} onClick={() => { modalInfo.type === 'delete' ? handleDelete(modalInfo.id) : handleIsPublic(modalInfo.id) }}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: false })}\n                    >Cancel</CButton>\n                </CModalFooter>\n            </CModal>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default CommentsList\n"],"sourceRoot":""}