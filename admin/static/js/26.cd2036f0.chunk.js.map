{"version":3,"sources":["views/jobs/JobsAdd.js"],"names":["JobsAdd","useState","categories","setCategories","addingLoader","setaddingLoader","job","setJob","toastMessages","setToastMessage","loadCategories","a","CallCategoriesList","response","json","Categories","data","console","log","encodeHTML","str","buf","i","length","unshift","charCodeAt","join","handleAdd","ev","medias","preventDefault","addObject","title","subTitle","type","salary","contact","email","address","website","isPublic","toString","description","category","AddJob","ok","useEffect","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","min","xs","md","custom","name","onChange","filter","map","_id","tag","checked","color","defaultChecked","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","content","editor","size","toastMessage","position","show","autohide","fade","closeButton","Math","floor","random"],"mappings":"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","file":"static/js/26.cd2036f0.chunk.js","sourcesContent":["\n\nimport React, { useState, useEffect } from 'react'\nimport { CToaster, CToastBody, CToastHeader, CToast, CInputFile, CTextarea, CSwitch, CSelect, CForm, CButton, CFormGroup, CCard, CSpinner, CCardBody, CCardFooter, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio }\n    from '@coreui/react'\nimport { JobsAdd as AddJob } from '../../../src/server/JobsManagement'\nimport { CategoriesList as CallCategoriesList } from '../../../src/server/CategoriesManagement'\nimport { Editor } from '@tinymce/tinymce-react';\n\n\n\nconst JobsAdd = () => {\n    const [categories, setCategories] = useState([])\n    const [addingLoader, setaddingLoader] = useState(false)\n    const [job, setJob] = useState(false)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadCategories = async () => {\n        const response = await CallCategoriesList()\n        const Categories = (await response.json()).data\n        console.log(Categories)\n        setCategories(Categories)\n    }\n    const encodeHTML = str => {\n        if (!str)\n            return ''\n        let buf = [];\n\n        for (var i = str.length - 1; i >= 0; i--) {\n            buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));\n        }\n\n        return buf.join('');\n    }\n    const handleAdd = async (ev) => {\n        job.medias = []\n        ev.preventDefault()\n        setaddingLoader(true)\n        let addObject = {\n            title: job.title,\n            subTitle: job.subTitle,\n            type: job.type,\n            salary: job.salary,\n            contact: { email: job.email, address: job.address, website: job.website },\n            isPublic: job.isPublic ? job.isPublic.toString() : 'true',\n            description: encodeHTML(job.description),\n            category: job.category\n        }\n        console.log('addObject', addObject)\n        const response = await AddJob(addObject)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The ' + job.title + ' job has been successfuly created', type: 'success' }\n            ])\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        setaddingLoader(false)\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'Add new job'}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"job\" onSubmit={handleAdd}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Job Title</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name...\" onInput={(ev) => setJob({ ...job, title: ev.target.value })} autoComplete=\"title\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol>\n                                        <CLabel htmlFor=\"subTitle\">Sub title</CLabel>\n                                        <CInput type=\"text\" id=\"subTitle\" required placeholder=\"Enter Sub title...\" onInput={(ev) => setJob({ ...job, subTitle: ev.target.value })} autoComplete=\"subTitle\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"type\">Type</CLabel>\n                                        <CInput type=\"text\" id=\"type\" required placeholder=\"Enter Type...\" onInput={(ev) => setJob({ ...job, type: ev.target.value })} autoComplete=\"type\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"salary\">Salary</CLabel>\n                                        <CInput type=\"number\" min=\"0\" id=\"salary\" required placeholder=\"Enter Salary...\" onInput={(ev) => setJob({ ...job, salary: ev.target.value })} autoComplete=\"salary\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol>\n                                        <CLabel htmlFor=\"email\">Email</CLabel>\n                                        <CInput type=\"email\" id=\"email\" required placeholder=\"Enter Email...\" onInput={(ev) => setJob({ ...job, email: ev.target.value })} autoComplete=\"email\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"address\">Address</CLabel>\n                                        <CInput type=\"text\" id=\"address\" required placeholder=\"Enter Address...\" onInput={(ev) => setJob({ ...job, address: ev.target.value })} autoComplete=\"address\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"website\">Website</CLabel>\n                                        <CInput type=\"text\" id=\"website\" required placeholder=\"Enter Website...\" onInput={(ev) => setJob({ ...job, website: ev.target.value })} autoComplete=\"website\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"select\">Category</CLabel>\n                                    <CCol xs=\"12\" md=\"3\">\n                                        <CSelect custom name=\"category\" className=\"ml-n3\" id=\"category\" required onChange={(ev) => { setJob({ ...job, category: ev.target.value }) }}>\n                                            {categories.filter(category => category.type === 'general').map(category => {\n                                                return <option key={category._id} value={category._id}>{category.name}</option>\n                                            })}\n                                        </CSelect>\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"2\" className=\"col-form-label\">\n                                        I want to publish this job:\n                                    </CCol>\n                                    <CCol sm=\"1\">\n                                        <CSwitch\n                                            onChange={(ev) => setJob({ ...job, isPublic: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                            defaultChecked\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\n                                    <Editor\n                                        apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                        initialValue=\"\"\n                                        init={{\n                                            height: 500,\n                                            menubar: false,\n                                            plugins: [\n                                                'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                                'searchreplace wordcount visualblocks visualchars code',\n                                                'insertdatetime media nonbreaking table directionality',\n                                                'emoticons template paste textpattern imagetools codesample'\n                                            ],\n                                            toolbar: 'bold italic sizeselect fontselect fontsizeselect | hr alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | insertfile undo redo | forecolor backcolor emoticons | ',\n                                        }}\n                                        onEditorChange={(content, editor) => {\n                                            setJob({ ...job, description: content })\n                                        }}\n                                    />\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Add Job</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {addingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default JobsAdd\n"],"sourceRoot":""}