{"version":3,"sources":["views/polls/PollsAdd.js","server/PollsManagement.js"],"names":["PollsAdd","useState","addingLoader","setaddingLoader","poll","setPoll","toastMessages","setToastMessage","handleAdd","ev","a","preventDefault","addObject","title","link","startDate","endDate","isPublic","toString","console","log","AddPoll","ok","description","type","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","min","toISOString","split","onChange","tag","checked","color","defaultChecked","size","map","toastMessage","position","show","autohide","fade","closeButton","Math","floor","random","bearerToken","localStorage","getItem","fetch","GetUrl","headers","body","JSON","stringify","then","response","catch","error","PollsList","mode","message","PollsEdit","editObject"],"mappings":"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","file":"static/js/19.b449ee81.chunk.js","sourcesContent":["\n\nimport React, { useState } from 'react'\nimport { CToaster, CToastBody, CToastHeader, CToast, CSwitch, CForm, CButton, CFormGroup, CCard, CSpinner, CCardBody, CCardFooter, CCol, CLabel, CRow, CInput, CLink }\n    from '@coreui/react'\nimport { PollsAdd as AddPoll } from '../../../src/server/PollsManagement'\n\n\n\nconst PollsAdd = () => {\n    const [addingLoader, setaddingLoader] = useState(false)\n    const [poll, setPoll] = useState(false)\n    const [toastMessages, setToastMessage] = useState([])\n    const handleAdd = async (ev) => {\n        ev.preventDefault()\n        setaddingLoader(true)\n        let addObject = {\n            title: poll.title,\n            link: poll.link,\n            startDate: poll.startDate,\n            endDate: poll.endDate,\n            isPublic: poll.isPublic ? poll.isPublic.toString() : 'true'\n        }\n        console.log('addObject', addObject)\n        const response = await AddPoll(addObject)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The ' + poll.title + ' poll has been successfuly created', type: 'success' }\n            ])\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        setaddingLoader(false)\n    }\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'Add new poll'}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"poll\" onSubmit={handleAdd}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Poll Title</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name...\" onInput={(ev) => setPoll({ ...poll, title: ev.target.value })} autoComplete=\"title\" />\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"link\">Poll Link</CLabel>\n                                    <CInput type=\"text\" id=\"link\" required placeholder=\"Enter Link...\" onInput={(ev) => setPoll({ ...poll, link: ev.target.value })} autoComplete=\"link\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol sm=\"6\">\n                                        <CLabel htmlFor=\"startDate\">Start Date</CLabel>\n                                        <CInput type=\"date\" min={new Date().toISOString().split('T')[0]} id=\"startDate\" required placeholder=\"Enter start date...\" onChange={(ev) => setPoll({ ...poll, startDate: ev.target.value })} />\n                                    </CCol>\n                                    <CCol sm=\"6\">\n                                        <CLabel htmlFor=\"endDate\">End Date</CLabel>\n                                        <CInput type=\"date\" min={new Date().toISOString().split('T')[0]} id=\"endDate\" required placeholder=\"Enter end date...\" onChange={(ev) => setPoll({ ...poll, endDate: ev.target.value })} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"2\" className=\"col-form-label\">\n                                        I want to publish this poll:\n                                    </CCol>\n                                    <CCol sm=\"1\">\n                                        <CSwitch\n                                            onChange={(ev) => setPoll({ ...poll, isPublic: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                            defaultChecked\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Add Poll</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {addingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default PollsAdd\n","import GetUrl from '../server/ApiEndpoints'\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\nconst PollsAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl('PollsAdd'), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\nconst PollsList = async function () {\n    return await fetch(GetUrl('PollsList'), {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst PollsDetail = async function (id) {\n    return await fetch(GetUrl('PollsList') + '/' + id, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst PollsEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl('PollsEdit') + '/' + id, {\n        method: 'PATCH',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json'\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\n\nexport { PollsList, PollsEdit, PollsDetail, PollsAdd }"],"sourceRoot":""}