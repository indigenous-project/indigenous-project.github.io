{"version":3,"sources":["views/posts/PostsAdd.js"],"names":["PostsAdd","useState","categories","setCategories","mediaFile","setMediaFile","addingLoader","setaddingLoader","post","setPost","toastMessages","setToastMessage","encodeHTML","str","buf","i","length","unshift","charCodeAt","join","loadCategories","a","CallCategoriesList","response","json","Categories","data","handleAdd","ev","medias","preventDefault","addPostCallback","mediaId","addObject","title","description","category","isPublic","toString","console","log","AddPost","ok","type","UploadMedia","useEffect","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","col","md","xs","name","onChange","files","custom","filter","map","_id","tag","checked","color","defaultChecked","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","content","editor","size","toastMessage","position","show","autohide","fade","closeButton","Math","floor","random"],"mappings":"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","file":"static/js/30.930fc09c.chunk.js","sourcesContent":["\n\nimport React, { useState, useEffect } from 'react'\nimport { CToaster, CToastBody, CToastHeader, CToast, CInputFile, CSwitch, CSelect, CForm, CButton, CFormGroup, CCard, CSpinner, CCardBody, CCardFooter, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio, CImg }\n    from '@coreui/react'\nimport { PostsAdd as AddPost } from '../../../src/server/PostsManagement'\nimport { UploadMedia } from '../../../src/server/MediasManagement'\nimport { CategoriesList as CallCategoriesList } from '../../../src/server/CategoriesManagement'\nimport { Editor } from '@tinymce/tinymce-react';\n\n\n\nconst PostsAdd = () => {\n    const [categories, setCategories] = useState([])\n    const [mediaFile, setMediaFile] = useState()\n    const [addingLoader, setaddingLoader] = useState(false)\n    const [post, setPost] = useState(false)\n    const [toastMessages, setToastMessage] = useState([])\n    const encodeHTML = str => {\n        if (!str)\n            return ''\n        let buf = [];\n\n        for (var i = str.length - 1; i >= 0; i--) {\n            buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));\n        }\n\n        return buf.join('');\n    }\n    const loadCategories = async () => {\n        const response = await CallCategoriesList()\n        const Categories = (await response.json()).data\n        setCategories(Categories)\n    }\n    const handleAdd = async (ev) => {\n        post.medias = []\n        ev.preventDefault()\n        setaddingLoader(true)\n        const addPostCallback = async function (mediaId) {\n            if (mediaId !== -1) {\n                let addObject = {\n                    title: post.title,\n                    description: encodeHTML(post.description),\n                    category: post.category,\n                    isPublic: post.isPublic ? post.isPublic.toString() : 'true',\n                    medias: [mediaId]\n                }\n                console.log('addObject', addObject)\n                const response = await AddPost(addObject)\n                if (response.ok) {\n                    setToastMessage([\n                        { title: 'Congrats!', description: 'The ' + post.title + ' post has been successfuly created', type: 'success' }\n                    ])\n                }\n                else {\n                    setToastMessage([\n                        { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n                    ])\n                }\n            }\n            setaddingLoader(false)\n        }\n        await UploadMedia(mediaFile, setToastMessage, addPostCallback)\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'Add new post'}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"post\" onSubmit={handleAdd}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Post Title</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name..\" onInput={(ev) => setPost({ ...post, title: ev.target.value })} autoComplete=\"name\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CLabel col md=\"1\" htmlFor=\"file-input\">Image/Video</CLabel>\n                                    <CCol xs=\"12\" md=\"9\" className=\"ml-n3 mt-1\">\n                                        <CInputFile id=\"file-input\" name=\"file-input\" onChange={(ev) => setMediaFile(ev.target.files[0])} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"select\">Category</CLabel>\n                                    <CCol xs=\"12\" md=\"3\">\n                                        <CSelect custom name=\"category\" className=\"ml-n3\" id=\"category\" required onChange={(ev) => { setPost({ ...post, category: ev.target.value }) }}>\n                                            {categories.filter(category => category.type === 'general').map(category => {\n                                                return <option key={category._id} value={category._id}>{category.name}</option>\n                                            })}\n                                        </CSelect>\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"2\" className=\"col-form-label\">\n                                        I want to publish this post:\n                                    </CCol>\n                                    <CCol sm=\"1\">\n                                        <CSwitch\n                                            onChange={(ev) => setPost({ ...post, isPublic: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                            defaultChecked\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\n                                    <Editor\n                                        apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                        initialValue=\"\"\n                                        init={{\n                                            height: 500,\n                                            menubar: false,\n                                            plugins: [\n                                                'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                                'searchreplace wordcount visualblocks visualchars code',\n                                                'insertdatetime media nonbreaking table directionality',\n                                                'emoticons template paste textpattern imagetools codesample'\n                                            ],\n                                            toolbar: 'bold italic sizeselect fontselect fontsizeselect | hr alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | insertfile undo redo | forecolor backcolor emoticons | ',\n                                        }}\n                                        onEditorChange={(content, editor) => {\n                                            setPost({ ...post, description: content })\n                                        }}\n                                    />\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Add Post</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {addingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default PostsAdd\n"],"sourceRoot":""}