{"version":3,"sources":["views/categories/CategoriesAdd.js","server/CategoriesManagement.js"],"names":["CategoriesAdd","useState","addingLoader","setaddingLoader","category","setCategory","toastMessages","setToastMessage","handleAdd","ev","a","preventDefault","addObject","name","type","AddCategory","ok","title","description","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","md","variant","inline","onChange","size","map","toastMessage","position","show","autohide","fade","color","closeButton","Math","floor","random","bearerToken","localStorage","getItem","CategoriesList","fetch","GetUrl","mode","headers","Authorization","Accept","catch","error","console","log","message","CategoriesEdit","editObject","body","JSON","stringify","then","response","CategoriesDelete"],"mappings":"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","file":"static/js/17.247c849f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { CToaster, CToastBody, CToastHeader, CToast, CForm, CButton, CFormGroup, CCard, CSpinner, CCardBody, CCardFooter, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio }\n    from '@coreui/react'\nimport { CategoriesAdd as AddCategory } from '../../../src/server/CategoriesManagement'\n\nconst CategoriesAdd = () => {\n    const [addingLoader, setaddingLoader] = useState(false)\n    const [category, setCategory] = useState(false)\n    const [toastMessages, setToastMessage] = useState([])\n    const handleAdd = async (ev) => {\n        ev.preventDefault()\n        setaddingLoader(true)\n        let addObject = {\n            name: category.name,\n            type: category.type,\n        }\n        const response = await AddCategory(addObject)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The ' + category.name + ' category has been successfuly created', type: 'success' }\n            ])\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        setaddingLoader(false)\n    }\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'Add new category'}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"post\" onSubmit={handleAdd}>\n                <CRow>\n                    <CCol sm=\"6\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Category Name</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name..\" onInput={(ev) => setCategory({ ...category, name: ev.target.value })} autoComplete=\"name\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol md=\"12\">\n                                        <CLabel>Type</CLabel>\n                                    </CCol>\n                                    <CCol md=\"12\">\n                                        <CFormGroup variant=\"checkbox\" inline>\n                                            <CInputRadio className=\"form-check-input\" id=\"type-general\" onChange={(ev) => setCategory({ ...category, type: 'general' })} name=\"radios\" value=\"general\" required />\n                                            <CLabel variant=\"checkbox\" htmlFor=\"type-general\">General</CLabel>\n                                        </CFormGroup>\n                                        <CFormGroup variant=\"checkbox\" inline>\n                                            <CInputRadio className=\"form-check-input\" id=\"type-organization\" onChange={(ev) => setCategory({ ...category, type: 'organization' })} name=\"radios\" value=\"organization\" />\n                                            <CLabel variant=\"checkbox\" htmlFor=\"type-organization\">Organization</CLabel>\n                                        </CFormGroup>\n                                        <CFormText className=\"help-block\">Please specify the type of the Category</CFormText>\n                                    </CCol>\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Add Category</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {addingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default CategoriesAdd\n","// importing GetUrl from the server\nimport GetUrl from \"../server/ApiEndpoints\";\n\n// Getting the token from the local storage\nlet bearerToken = \"Bearer \" + localStorage.getItem(\"HDI-token\");\n\n// Getting the categories list using url from the server by using GET method and if its not successful it will display an error message\nconst CategoriesList = async function () {\n    return await fetch(GetUrl(\"CategoriesList\"), {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        }\n    }).catch(error => {\n        console.log(error.message);\n    });\n};\n\n// Editing the categories list using url from the server by using PATCH method and also stringifying the object and if its not successful it will display an error message\nconst CategoriesEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesEdit\") + \"/\" + id, {\n        method: \"PATCH\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error);\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\nconst CategoriesDelete = async function (id, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesDelete\") + \"/\" + id, {\n        method: \"DELETE\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        }\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error);\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\n// Adding a new Category. if its not successful it will display an error message\nconst CategoriesAdd = async function (addObject, setToastMessage) {\n    return fetch(GetUrl(\"CategoriesAdd\"), {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: bearerToken,\n            Accept: \"application/json\"\n        },\n        body: JSON.stringify(addObject)\n    })\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        });\n};\n\n// exporting the categoriesList and categoriesEdit functions\nexport { CategoriesList, CategoriesEdit, CategoriesAdd, CategoriesDelete };"],"sourceRoot":""}