{"version":3,"sources":["views/jobs/JobsEdit.js","views/jobs/JobsDetail.js","views/jobs/JobsList.js"],"names":["JobsEdit","job","setJob","setToastMessage","loadJobsList","toastMessages","useState","categories","setCategories","editingLoader","setEditingLoader","encodeHTML","str","buf","i","length","unshift","charCodeAt","join","decodeHTML","replace","match","dec","String","fromCharCode","handleEdit","ev","a","preventDefault","editObject","title","subTitle","type","jobType","salary","contact","email","address","website","isPublic","toString","description","category","EditJob","_id","ok","loadCategories","CallCategoriesList","response","json","Categories","data","useEffect","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","min","xs","md","custom","name","onChange","filter","map","tag","checked","color","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","content","editor","size","JobsDetail","console","log","owner","createdAt","updatedAt","generateIcon","iconName","freeSet","JobsList","Jobs","setJobs","show","modalInfo","setModalInfo","tempJobs","setTempJobs","searchString","setSearchString","loading","setLoading","CallJobsList","handleSearch","keyword","toLowerCase","temp","Job","includes","host","date","sort","b","reverse","handleDelete","CallJobsEdit","isDeleted","handleIsPublic","columns","selector","sortable","left","center","cell","toLocaleDateString","onClick","highlightOnHover","pagination","progressPending","onClosed","closeButton","toastMessage","position","autohide","fade","Math","floor","random"],"mappings":"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","file":"static/js/27.20eb6e95.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { CForm, CButton, CFormGroup, CSelect, CCard, CSpinner, CCardBody, CCardFooter, CSwitch, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio, CAlert }\n    from '@coreui/react'\nimport { CategoriesList as CallCategoriesList } from '../../../src/server/CategoriesManagement'\nimport { JobsEdit as EditJob } from '../../../src/server/JobsManagement'\nimport { Editor } from '@tinymce/tinymce-react';\n\n\nconst JobsEdit = ({ job, setJob, setToastMessage, toastMessages, loadJobsList }) => {\n    const [categories, setCategories] = useState([])\n    const [editingLoader, setEditingLoader] = useState(false)\n    const encodeHTML = str => {\n        if (!str)\n            return ''\n        let buf = [];\n\n        for (var i = str.length - 1; i >= 0; i--) {\n            buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));\n        }\n\n        return buf.join('');\n    }\n\n    const decodeHTML = str => {\n        return str.replace(/&#(\\d+);/g, function (match, dec) {\n            return String.fromCharCode(dec);\n        });\n    }\n    const handleEdit = async (ev) => {\n        ev.preventDefault()\n        setEditingLoader(true)\n        let editObject = {\n            title: job.title,\n            subTitle: job.subTitle,\n            type: job.jobType,\n            salary: job.salary,\n            contact: { email: job.contact.email, address: job.contact.address, website: job.contact.website },\n            isPublic: job.isPublic.toString(),\n            description: encodeHTML(decodeHTML(job.description)),\n            category: job.category\n        }\n        const response = await EditJob(job._id, editObject, setToastMessage)\n        if (response.ok) {\n            loadJobsList()\n            setToastMessage([\n                { title: 'Congrats!', description: 'The information of job with id: ' + job._id + ' has been successfuly changed', type: 'success' }\n            ])\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        setEditingLoader(false)\n    }\n    const loadCategories = async () => {\n        const response = await CallCategoriesList()\n        const Categories = (await response.json()).data\n        setCategories(Categories)\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'ID: ' + job._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"job\" onSubmit={handleEdit}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Job Title</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name...\" onInput={(ev) => setJob({ ...job, title: ev.target.value })} value={job.title} autoComplete=\"title\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol>\n                                        <CLabel htmlFor=\"subTitle\">Sub title</CLabel>\n                                        <CInput type=\"text\" id=\"subTitle\" required placeholder=\"Enter Sub title...\" onInput={(ev) => setJob({ ...job, subTitle: ev.target.value })} value={job.subTitle} autoComplete=\"subTitle\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"type\">Type</CLabel>\n                                        <CInput type=\"text\" id=\"type\" required placeholder=\"Enter Type...\" onInput={(ev) => setJob({ ...job, jobType: ev.target.value })} value={job.jobType} autoComplete=\"type\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"salary\">Salary</CLabel>\n                                        <CInput type=\"number\" min=\"0\" id=\"salary\" required placeholder=\"Enter Salary...\" onInput={(ev) => setJob({ ...job, salary: ev.target.value })} value={job.salary} autoComplete=\"salary\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol>\n                                        <CLabel htmlFor=\"email\">Email</CLabel>\n                                        <CInput type=\"email\" id=\"email\" required placeholder=\"Enter Email...\" onInput={(ev) => setJob({ ...job, contact: { ...job.contact, email: ev.target.value } })} value={job.contact.email} autoComplete=\"email\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"address\">Address</CLabel>\n                                        <CInput type=\"text\" id=\"address\" required placeholder=\"Enter Address...\" onInput={(ev) => setJob({ ...job, contact: { ...job.contact, address: ev.target.value } })} value={job.contact.address} autoComplete=\"address\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"website\">Website</CLabel>\n                                        <CInput type=\"text\" id=\"website\" required placeholder=\"Enter Website...\" onInput={(ev) => setJob({ ...job, contact: { ...job.contact, website: ev.target.value } })} value={job.contact.website} autoComplete=\"website\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"select\">Category</CLabel>\n                                    <CCol xs=\"12\" md=\"3\">\n                                        <CSelect custom name=\"category\" className=\"ml-n3\" id=\"category\" required onChange={(ev) => { setJob({ ...job, category: ev.target.value }) }} value={job.category ? job.category._id : ''}>\n                                            {categories.filter(category => category.type === 'general').map(category => {\n                                                return <option key={category._id} value={category._id}>{category.name}</option>\n                                            })}\n                                        </CSelect>\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label\">\n                                        I want to publish this job:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n5\">\n                                        <CSwitch\n                                            onChange={(ev) => setJob({ ...job, isPublic: ev.target.checked })}\n                                            className=\"ml-n5 mt-1\"\n                                            color=\"info\"\n                                            checked={job.isPublic ? true : false}\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\n                                    <Editor\n                                        apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                        initialValue={decodeHTML(job.description)}\n                                        init={{\n                                            height: 300,\n                                            menubar: false,\n                                            plugins: [\n                                                'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                                'searchreplace wordcount visualblocks visualchars code',\n                                                'insertdatetime media nonbreaking table directionality',\n                                                'emoticons template paste textpattern imagetools codesample'\n                                            ],\n                                            toolbar: 'bold italic sizeselect fontselect fontsizeselect | hr alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | insertfile undo redo | forecolor backcolor emoticons | ',\n                                        }}\n                                        onEditorChange={(content, editor) => {\n                                            setJob({ ...job, description: content })\n                                        }}\n                                    />\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Edit Job</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {editingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n        </>\n    )\n}\n\nexport default JobsEdit\n","import React from 'react'\nimport { CBadge, CImg, CListGroup, CListGroupItem, CCard, CCardBody, CCardHeader, CCol, CRow }\n    from '@coreui/react'\nimport { freeSet } from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport { Editor } from '@tinymce/tinymce-react';\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} className=\"mr-3 ml-1\" />)\n}\nconst decodeHTML = str => {\n    return str.replace(/&#(\\d+);/g, function (match, dec) {\n        return String.fromCharCode(dec);\n    });\n}\nconst JobsDetail = ({ job }) => {\n    console.log('job: ', job)\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">ID: {job._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            {job ? <CRow>\n                <CCol sm=\"6\">\n                    <CListGroup>\n                        <CListGroupItem><strong>Title: </strong>{job.title}</CListGroupItem>\n                        <CListGroupItem><strong>Sub title: </strong>{job.subTitle}</CListGroupItem>\n                        <CListGroupItem><strong>Salary: </strong>{job.salary}</CListGroupItem>\n                        <CListGroupItem><strong>Type: </strong>{job.jobType}</CListGroupItem>\n                        <CListGroupItem><strong>Category: </strong>{job.category ? job.category.name : 'Not specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Owner: </strong>{job.owner ? job.owner.email : 'Not specified'}</CListGroupItem>\n                    </CListGroup>\n                </CCol>\n                <CCol sm=\"6\">\n                    <CListGroup>\n                        <CListGroupItem><strong>Email: </strong>{job.contact ? job.contact.email : 'Not specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Address: </strong>{job.contact ? job.contact.address : 'Not specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Website: </strong>{job.contact ? job.contact.website : 'Not specified'}</CListGroupItem>\n                        <CListGroupItem><strong>Is this job visible for users: </strong><CBadge color={job.isPublic ? 'success' : 'danger'} className=\"ml-2 p-2\">{job.isPublic ? 'Yes' : 'No'}</CBadge></CListGroupItem>\n                        <CListGroupItem><strong>Posted At: </strong>{job.createdAt ? job.createdAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                        <CListGroupItem><strong>Last Update At: </strong>{job.updatedAt ? job.updatedAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                    </CListGroup>\n                </CCol>\n            </CRow> : null}\n            <CCard className=\"mt-4\">\n                <CCardHeader>\n                    Description:\n                </CCardHeader>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <Editor\n                                apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                initialValue={decodeHTML(job.description)}\n                                init={{\n                                    height: 300,\n                                    menubar: false,\n                                    plugins: [\n                                        'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                        'searchreplace wordcount visualblocks visualchars code',\n                                        'insertdatetime media nonbreaking table directionality',\n                                        'emoticons template paste textpattern imagetools codesample'\n                                    ],\n                                    toolbar: '',\n                                }}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n        </>\n    )\n}\n\nexport default JobsDetail\n","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow, CInput, CBadge, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody }\n    from '@coreui/react'\nimport { JobsList as CallJobsList, JobsEdit as CallJobsEdit } from '../../../src/server/JobsManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { freeSet } from '@coreui/icons'\nimport JobsEdit from './JobsEdit'\nimport JobsDetail from './JobsDetail'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst JobsList = () => {\n    const [Jobs, setJobs] = useState([])\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempJobs, setTempJobs] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadJobsList = async () => {\n        setLoading(true)\n        const response = await CallJobsList()\n        const JobsList = (await response.json()).data\n        console.log(JobsList)\n        setJobs(JobsList)\n        handleSearch(searchString, JobsList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, JobsList) => {\n        keyword = keyword.toLowerCase()\n        const JobsArray = JobsList ? JobsList : Jobs\n        const temp = JobsArray.filter(Job => {\n            return Job.title.toLowerCase().includes(keyword) || Job.host.toLowerCase().includes(keyword) || Job.date.toLowerCase().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempJobs(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CallJobsEdit(id, { isDeleted: 'true' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The Job with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            await loadJobsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false, type: 'delete' })\n    }\n\n    const handleIsPublic = async (id) => {\n        const response = await CallJobsEdit(id, { isPublic: !modalInfo.isPublic + '' }, setToastMessage)\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The publicity status of Job with id: ' + id + ' has been successfuly changed', type: 'success' }\n            ])\n            await loadJobsList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    useEffect(() => {\n        loadJobsList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Title</strong>,\n            selector: 'title',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Sub title</strong>,\n            selector: 'subTitle',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Type</strong>,\n            selector: 'type',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Salary</strong>,\n            selector: 'salary',\n            sortable: true,\n            center: true,\n        },\n        {\n            name: <strong>Posted Date</strong>,\n            selector: 'createdAt',\n            sortable: true,\n            center: true,\n            cell: row => new Date(row.createdAt).toLocaleDateString()\n        },\n        {\n            name: <strong>Is Visible</strong>,\n            selector: 'isPublic',\n            sortable: true,\n            center: true,\n            cell: row => <CBadge color={row.isPublic ? 'success' : 'danger'} className=\"float-right\">{row.isPublic ? 'Yes' : 'No'}</CBadge>\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, jobType: row.type, show: !modalInfo.show, type: 'detail' })}>\n                        {generateIcon('cilInfo')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, jobType: row.type, show: !modalInfo.show, type: 'edit' })}>\n                        {generateIcon('cilPencil')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, isPublic: row.isPublic, show: !modalInfo.show, type: 'isPublic' })}>\n                        {generateIcon('cilCloudUpload')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, title: row.title, show: !modalInfo.show, type: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                </div>,\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"6\">\n\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Jobs List\"\n                                columns={columns}\n                                data={tempJobs}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.type })\n                    setToastMessage([])\n                }}\n                color={modalInfo.type === 'delete' ? 'danger' : modalInfo.type === 'isPublic' ? 'warning' : 'info'}\n                size={(modalInfo.type === 'edit' || modalInfo.type === 'detail') ? 'xl' : ''}\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.type === 'delete' ? 'Delete Job account' : modalInfo.type === 'edit' ? 'Edit Job profile' : modalInfo.type === 'detail' ? 'Job detail' : 'Change Publicity status'}</CModalTitle>\n                </CModalHeader>\n                {modalInfo.show ? <CModalBody>\n                    {modalInfo.type === 'delete' ? <div>Are you sure you want to delete <strong>{modalInfo.title}</strong>?</div> : modalInfo.type === 'isPublic' ? <div>Are you sure you want to change publicity status of <strong>{modalInfo.title}</strong>?</div> : null}\n                    {modalInfo.type === 'edit' ? <JobsEdit loadJobsList={loadJobsList} job={modalInfo} setJob={setModalInfo} setToastMessage={setToastMessage} toastMessages={toastMessages} /> : modalInfo.type === 'detail' ? <JobsDetail job={modalInfo} /> : null}\n                </CModalBody> : null}\n                {modalInfo.type === 'delete' || modalInfo.type === 'isPublic' ? <CModalFooter>\n                    <CButton color={modalInfo.type === 'delete' ? 'danger' : 'warning'} onClick={() => modalInfo.type === 'delete' ? handleDelete(modalInfo.id) : handleIsPublic(modalInfo.id)}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: false })}\n                    >Cancel</CButton>\n                </CModalFooter> : null}\n            </CModal>\n            {toastMessages.map(toastMessage => {\n                console.log(toastMessage)\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + Math.floor(Math.random() * 1000000)}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default JobsList\n"],"sourceRoot":""}