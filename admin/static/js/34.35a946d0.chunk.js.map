{"version":3,"sources":["server/UsersManagement.js","views/users/UsersEdit.js","views/users/UsersDetail.js","views/users/UsersList.js"],"names":["bearerToken","localStorage","getItem","UsersList","a","fetch","GetUrl","method","mode","headers","catch","error","console","log","message","UsersEdit","id","editObject","setToastMessage","body","JSON","stringify","then","response","title","description","type","user","setUser","loadUsersList","toastMessages","useState","editingLoader","setEditingLoader","handleEdit","ev","preventDefault","firstName","lastName","gender","age","isActive","toString","isIndigenous","isAdmin","EditUser","_id","ok","sm","className","Date","toDateString","action","htmlFor","disabled","placeholder","value","email","autoComplete","required","onInput","target","row","md","variant","inline","onChange","checked","name","min","color","onClick","size","show","UsersDetail","createdAt","replace","updatedAt","items","loginLog","fields","key","label","_style","width","sorter","itemsPerPage","pagination","scopedSlots","item","isSuccess","generateIcon","iconName","content","freeSet","users","setUsers","modalInfo","setModalInfo","tempUsers","setTempUsers","searchString","setSearchString","loading","setLoading","CallUsersList","json","usersList","data","handleSearch","keyword","toLowerCase","temp","filter","includes","sort","b","reverse","handleDelete","CallUsersEdit","isDeleted","useEffect","columns","selector","sortable","left","cell","center","highlightOnHover","progressPending","onClosed","closeButton","map","toastMessage","position","autohide","fade","Math","floor","random"],"mappings":"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","file":"static/js/34.35a946d0.chunk.js","sourcesContent":["import GetUrl from '../server/ApiEndpoints'\nlet bearerToken = 'Bearer ' + localStorage.getItem('HDI-token')\n\n\nconst UsersList = async function () {\n    return await fetch(GetUrl('UsersList'), {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            'Authorization': bearerToken,\n            'Accept': 'application/json',\n        }\n    })\n        .catch(error => {\n            console.log(error.message)\n        })\n}\n\nconst UsersEdit = async function (id, editObject, setToastMessage) {\n    return fetch(GetUrl('UsersEdit') + '/' + id, {\n        method: 'PATCH',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearerToken,\n            'Accept': 'application/json'\n        },\n        body: JSON.stringify(editObject)\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            console.log(error)\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        })\n}\n\n\nexport { UsersList, UsersEdit }","import React, { useState } from 'react'\nimport { CForm, CButton, CFormGroup, CCard, CSpinner, CCardBody, CCardFooter, CSwitch, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio, CAlert }\n    from '@coreui/react'\nimport { UsersEdit as EditUser } from '../../../src/server/UsersManagement'\n\nconst UsersEdit = ({ user, setUser, setToastMessage, toastMessages, loadUsersList }) => {\n    const [editingLoader, setEditingLoader] = useState(false)\n    const handleEdit = async (ev) => {\n        ev.preventDefault()\n        setEditingLoader(true)\n        let editObject = {\n            firstName: user.firstName, lastName: user.lastName, gender: user.gender, age: user.age,\n            isActive: (user.isActive ? true : false).toString(),\n            isIndigenous: (user.isIndigenous ? true : false).toString(),\n            isAdmin: (user.isAdmin ? true : false).toString()\n        }\n        const response = await EditUser(user._id, editObject, setToastMessage)\n        if (response.ok) {\n            loadUsersList()\n            setToastMessage([\n                { title: 'Congrats!', description: 'The information of user with id: ' + user._id + ' has been successfuly changed', type: 'success' }\n            ])\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        setEditingLoader(false)\n    }\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'ID: ' + user._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"post\">\n                <CRow>\n                    <CCol sm=\"6\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"email\">Email</CLabel>\n                                    <CInput type=\"email\" disabled id=\"email\" placeholder=\"Enter Email..\" value={user.email ? user.email : ''} autoComplete=\"email\" />\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"firstName\">Firstname</CLabel>\n                                    <CInput required type=\"text\" id=\"firstName\" placeholder=\"Enter Firstname..\" value={user.firstName ? user.firstName : ''} onInput={(ev) => setUser({ ...user, firstName: ev.target.value })} autoComplete=\"firstname\" />\n                                    <CFormText className=\"help-block\">Please enter the firstname</CFormText>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"lastName\">Lastname</CLabel>\n                                    <CInput required type=\"text\" id=\"lastName\" placeholder=\"Enter Lastname..\" value={user.lastName ? user.lastName : ''} onInput={(ev) => setUser({ ...user, lastName: ev.target.value })} autoComplete=\"lastname\" />\n                                    <CFormText className=\"help-block\">Please enter the lastname</CFormText>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol md=\"12\">\n                                        <CLabel>Gender</CLabel>\n                                    </CCol>\n                                    <CCol md=\"12\">\n                                        <CFormGroup variant=\"checkbox\" inline>\n                                            <CInputRadio className=\"form-check-input\" id=\"gender-male\" onChange={(ev) => setUser({ ...user, gender: 'male' })} checked={user.gender === 'male' ? true : false} name=\"radios\" value=\"male\" />\n                                            <CLabel variant=\"checkbox\" htmlFor=\"radio1\">Male</CLabel>\n                                        </CFormGroup>\n                                        <CFormGroup variant=\"checkbox\" inline>\n                                            <CInputRadio className=\"form-check-input\" id=\"radio2\" onChange={(ev) => setUser({ ...user, gender: 'female' })} checked={user.gender === 'female' ? true : false} name=\"radios\" value=\"female\" />\n                                            <CLabel variant=\"checkbox\" htmlFor=\"radio2\">Femail</CLabel>\n                                        </CFormGroup>\n                                        <CFormGroup variant=\"checkbox\" inline>\n                                            <CInputRadio className=\"form-check-input\" id=\"radio3\" onChange={(ev) => setUser({ ...user, gender: 'other' })} checked={user.gender === 'other' ? true : false} name=\"radios\" value=\"other\" />\n                                            <CLabel variant=\"checkbox\" htmlFor=\"radio3\">Other</CLabel>\n                                        </CFormGroup>\n                                        <CFormText className=\"help-block\">Please specify the gender of the user</CFormText>\n                                    </CCol>\n                                </CFormGroup>\n                            </CCardBody>\n                        </CCard>\n                    </CCol>\n                    <CCol sm=\"6\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"age\">Age</CLabel>\n                                    <CInput required type=\"number\" id=\"age\" min='10' placeholder=\"Enter Age...\" value={user.age ? user.age : ''} onInput={(ev) => setUser({ ...user, age: ev.target.value })} autoComplete=\"age\" />\n                                    <CFormText className=\"help-block\">Please enter the age</CFormText>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"isAdmin\" className=\"w-100\">Is this user an Admin?</CLabel>\n                                    <CSwitch\n                                        className=\"mr-1\"\n                                        color=\"info\"\n                                        checked={user.isAdmin ? true : false}\n                                        onChange={(ev) => setUser({ ...user, isAdmin: ev.target.checked })}\n                                        id=\"isAdmin\"\n                                    />\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"isActive\" className=\"w-100\">Account status: Active/Inactive</CLabel>\n                                    <CSwitch\n                                        className=\"mr-1\"\n                                        color=\"info\"\n                                        checked={user.isActive ? true : false}\n                                        onChange={(ev) => setUser({ ...user, isActive: ev.target.checked })}\n                                        id=\"isActive\"\n                                    />\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"isIndigenous\" className=\"w-100\">Is this account belong to an indigenous person?</CLabel>\n                                    <CSwitch\n                                        className=\"mr-1\"\n                                        color=\"info\"\n                                        checked={user.isIndigenous ? true : false}\n                                        onChange={(ev) => setUser({ ...user, isIndigenous: ev.target.checked })}\n                                        id=\"isIndigenous\"\n                                    />\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton onClick={handleEdit} size=\"md\" className=\"btn btn-info\">Apply Edit</CButton> <CLink size=\"sm\" onClick={() => setUser({ show: !user.show, type: user.type })} className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {editingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n        </>\n    )\n}\n\nexport default UsersEdit\n","import React from 'react'\nimport { CBadge, CDataTable, CCard, CCardBody, CCol, CListGroupItem, CRow, CListGroup }\n    from '@coreui/react'\n\nconst UsersDetail = ({ user }) => {\n    const fields = [{\n        key: 'createdAt',\n        label: 'Date',\n        _style: { width: '1%' }\n    },\n    {\n        key: 'isSuccess',\n        label: 'Status',\n        _style: { width: '1%' }\n    }]\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">ID: {user._id}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CCard>\n                <CCardBody>\n                    {user ? <CRow>\n                        <CCol sm=\"6\">\n                            <CListGroup>\n                                <CListGroupItem><strong>Email: </strong>{user.email}</CListGroupItem>\n                                <CListGroupItem><strong>Full Name: </strong>{user.firstName + ' ' + user.lastName}</CListGroupItem>\n                                <CListGroupItem><strong>Gender: </strong>{user.gender ? user.gender : 'Not specified'}</CListGroupItem>\n                                <CListGroupItem><strong>Age: </strong>{user.age ? user.age : 'Not specified'}</CListGroupItem>\n                                <CListGroupItem><strong>Role: </strong><CBadge color={'info'} className=\"ml-2 p-2\">{user.isAdmin ? 'Admin' : 'Mobile User'}</CBadge></CListGroupItem>\n                                <CListGroupItem><strong>Is this account active: </strong><CBadge color={user.isActive ? 'success' : 'danger'} className=\"ml-2 p-2\">{user.isActive ? 'Yes' : 'No'}</CBadge></CListGroupItem>\n                                <CListGroupItem><strong>Is Indigenous: </strong><CBadge color={'info'} className=\"ml-2 p-2\">{user.isIndigenous ? 'Yes' : 'No'}</CBadge></CListGroupItem>\n                                <CListGroupItem><strong>Created At: </strong>{user.createdAt ? user.createdAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                                <CListGroupItem><strong>Last Update At: </strong>{user.updatedAt ? user.updatedAt.replace('T', ' ').replace('Z', '') : ''}</CListGroupItem>\n                            </CListGroup>\n                        </CCol>\n                        <CCol sm=\"6\">\n                            <h3 className=\"mb-4\">Login Logs</h3>\n                            <CDataTable\n                                items={user.loginLog}\n                                fields={fields}\n                                size=\"\"\n                                sorter\n                                itemsPerPage={5}\n                                pagination\n                                scopedSlots={{\n                                    'createdAt':\n                                        (item) => (<td>{item.createdAt.replace('T', '----').replace('Z', '')}</td>)\n                                    ,\n                                    'isSuccess':\n                                        (item) => (<td>{item.isSuccess ? 'Successful' : 'Failed'}</td>)\n\n                                }}\n                            />\n                        </CCol>\n                    </CRow> : null}\n                </CCardBody>\n            </CCard>\n        </>\n    )\n}\n\nexport default UsersDetail\n","import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow, CInput, CBadge, CLink, CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CToaster, CToast, CToastHeader, CToastBody }\n    from '@coreui/react'\nimport { UsersList as CallUsersList, UsersEdit as CallUsersEdit } from '../../../src/server/UsersManagement'\nimport DataTable from 'react-data-table-component';\nimport CIcon from '@coreui/icons-react'\nimport { freeSet } from '@coreui/icons'\nimport UsersEdit from './UsersEdit'\nimport UsersDetail from './UsersDetail'\n\nconst generateIcon = function (iconName) {\n    return (<CIcon content={freeSet[iconName]} />)\n}\n\nconst UsersList = () => {\n    const [users, setUsers] = useState([])\n    const [modalInfo, setModalInfo] = useState({ show: false })\n    const [tempUsers, setTempUsers] = useState([])\n    const [searchString, setSearchString] = useState('')\n    const [loading, setLoading] = useState(true)\n    const [toastMessages, setToastMessage] = useState([])\n    const loadUsersList = async () => {\n        setLoading(true)\n        const response = await CallUsersList()\n        const usersList = (await response.json()).data\n        console.log(usersList)\n        setUsers(usersList)\n        handleSearch(searchString, usersList)\n        setLoading(false)\n    }\n    const handleSearch = (keyword, usersList) => {\n        keyword = keyword.toLowerCase()\n        const usersArray = usersList ? usersList : users\n        const temp = usersArray.filter(user => {\n            return user.email.toLowerCase().includes(keyword) || user.firstName.toLowerCase().includes(keyword) || user.lastName.toLowerCase().includes(keyword)\n        }).sort(function (a, b) { return a.createdAt - b.createdAt }).reverse()\n        setTempUsers(temp)\n        setSearchString(keyword)\n    }\n    const handleDelete = async (id) => {\n        const response = await CallUsersEdit(id, { isDeleted: 'true' })\n        if (response.ok) {\n            setToastMessage([\n                { title: 'Congrats!', description: 'The user with id: ' + id + ' has been successfuly deleted', type: 'success' }\n            ])\n            await loadUsersList()\n        }\n        else {\n            setToastMessage([\n                { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n            ])\n        }\n        console.log(response)\n        setModalInfo({ show: false })\n    }\n    useEffect(() => {\n        loadUsersList()\n    }, [])\n    const columns = [\n        {\n            name: <strong>Email</strong>,\n            selector: 'email',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Full name</strong>,\n            selector: 'firstName',\n            sortable: true,\n            left: true,\n            cell: row => row.firstName + ' ' + row.lastName\n        },\n        {\n            name: <strong>Gender</strong>,\n            selector: 'gender',\n            sortable: true,\n            left: true,\n        },\n        {\n            name: <strong>Role</strong>,\n            selector: 'isAdmin',\n            sortable: true,\n            cell: row => <CBadge color=\"info\" className=\"float-right\">{row.isAdmin ? 'Admin' : 'Mobile User'}</CBadge>\n        },\n        {\n            name: <strong>Is Active</strong>,\n            selector: 'isActive',\n            sortable: true,\n            center: true,\n            cell: row => row.isActive ? <CBadge color=\"success\" className=\"float-right\">Active</CBadge> : <CBadge color=\"danger\" className=\"float-right\">Not Active</CBadge>\n        },\n        {\n            name: '',\n            selector: '_id',\n            cell: row =>\n                <div>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, show: !modalInfo.show, type: 'detail' })}>\n                        {generateIcon('cilInfo')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ ...row, show: !modalInfo.show, type: 'edit' })}>\n                        {generateIcon('cilPencil')}\n                    </CLink>\n                    <CLink className=\"card-header-action\" onClick={() => setModalInfo({ id: row._id, email: row.email, show: !modalInfo.show, type: 'delete' })}>\n                        {generateIcon('cilTrash')}\n                    </CLink>\n                </div>,\n        },\n    ];\n\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"6\">\n\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <CInput type=\"text\" id=\"searchText\" placeholder=\"search by keyword ...\" onInput={(ev) => handleSearch(ev.target.value)} />\n                            <DataTable\n                                title=\"Users List\"\n                                columns={columns}\n                                data={tempUsers}\n                                highlightOnHover={true}\n                                pagination={true}\n                                progressPending={loading}\n                            />\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CModal\n                show={modalInfo.show}\n                onClosed={() => {\n                    setModalInfo({ show: false, type: modalInfo.type })\n                    setToastMessage([])\n                }}\n                color={modalInfo.type === 'delete' ? 'danger' : 'info'}\n                size={(modalInfo.type === 'edit' || modalInfo.type === 'detail') ? 'xl' : ''}\n            >\n                <CModalHeader closeButton>\n                    <CModalTitle>{modalInfo.type === 'delete' ? 'Delete user account' : modalInfo.type === 'edit' ? 'Edit user profile' : 'User info'}</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    {modalInfo.type === 'delete' ? <div>Are you sure you want to delete <strong>{modalInfo.email}</strong> user?</div> : null}\n                    {modalInfo.type === 'edit' ? <UsersEdit loadUsersList={loadUsersList} user={modalInfo} setUser={setModalInfo} setToastMessage={setToastMessage} toastMessages={toastMessages} /> : modalInfo.type === 'detail' ? <UsersDetail user={modalInfo} /> : null}\n                </CModalBody>\n                {modalInfo.type === 'delete' ? <CModalFooter>\n                    <CButton color={'danger'} onClick={() => handleDelete(modalInfo.id)}>Yes</CButton>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setModalInfo({ show: !modalInfo.show })}\n                    >Cancel</CButton>\n                </CModalFooter> : null}\n            </CModal>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default UsersList\n"],"sourceRoot":""}