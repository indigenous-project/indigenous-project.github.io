{"version":3,"sources":["views/organizations/OrganizationsAdd.js"],"names":["Geocode","setApiKey","OrganizationsAdd","useState","categories","setCategories","mediaFile","setMediaFile","iconFile","setIconFile","addingLoader","setaddingLoader","organization","setOrganization","toastMessages","setToastMessage","encodeHTML","str","buf","i","length","unshift","charCodeAt","join","loadCategories","a","CallCategoriesList","response","json","Categories","data","handleAdd","ev","medias","preventDefault","addOrganizationCallback","mediaIds","fromAddress","contact","address","then","results","geometry","location","lat","lng","console","log","error","addObject","name","coords","long","email","phone","website","description","category","_id","isPublic","toString","isIndigenous","isAvailable","icon","openHours","monday","tuesday","wednesday","thursday","friday","saturday","sunday","AddOrganization","ok","title","type","UploadManyMedias","content","useEffect","sm","id","className","Date","toDateString","action","method","onSubmit","htmlFor","required","placeholder","onInput","target","value","autoComplete","row","col","md","xs","onChange","files","custom","filter","map","tag","checked","color","defaultChecked","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","editor","size","toastMessage","position","show","autohide","fade","closeButton","Math","floor","random"],"mappings":"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","file":"static/js/28.24e8eea1.chunk.js","sourcesContent":["\n\nimport React, { useState, useEffect } from 'react'\nimport { CToaster, CToastBody, CToastHeader, CToast, CInputFile, CTextarea, CSwitch, CSelect, CForm, CButton, CFormGroup, CCard, CSpinner, CCardBody, CCardFooter, CCol, CLabel, CRow, CInput, CFormText, CLink, CInputRadio, CImg }\n    from '@coreui/react'\nimport { OrganizationsAdd as AddOrganization } from '../../../src/server/OrganizationsManagement'\nimport { UploadManyMedias } from '../../../src/server/MediasManagement'\nimport { CategoriesList as CallCategoriesList } from '../../../src/server/CategoriesManagement'\nimport { Editor } from '@tinymce/tinymce-react';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyASXJAnvrEDFYxlqDRwtHCe8bW69_TV7RE\");\n\nconst OrganizationsAdd = () => {\n\n    const [categories, setCategories] = useState([])\n    const [mediaFile, setMediaFile] = useState()\n    const [iconFile, setIconFile] = useState()\n    const [addingLoader, setaddingLoader] = useState(false)\n    const [organization, setOrganization] = useState(false)\n    const [toastMessages, setToastMessage] = useState([])\n    const encodeHTML = str => {\n        if (!str)\n            return ''\n        let buf = [];\n\n        for (var i = str.length - 1; i >= 0; i--) {\n            buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));\n        }\n\n        return buf.join('');\n    }\n    const loadCategories = async () => {\n        const response = await CallCategoriesList()\n        const Categories = (await response.json()).data\n        setCategories(Categories)\n    }\n    const handleAdd = async (ev) => {\n        organization.medias = []\n        ev.preventDefault()\n        setaddingLoader(true)\n        const addOrganizationCallback = async function (mediaIds) {\n            await Geocode.fromAddress(organization.contact.address).then(\n                (response) => {\n                    const { lat, lng } = response.results[0].geometry.location;\n                    organization.lat = lat\n                    organization.lng = lng\n                    console.log(lat, lng);\n                },\n                (error) => {\n                    console.error(error);\n                }\n            );\n            if (mediaIds.length === 2) {\n                let addObject = {\n                    name: organization.name,\n                    coords: { lat: organization.lat, long: organization.lng },\n                    contact: { email: organization.contact.email, phone: organization.contact.phone, website: organization.contact.website, address: organization.contact.address },\n                    description: encodeHTML(organization.description),\n                    category: organization.category ? organization.category : categories[0]._id,\n                    isPublic: organization.isPublic ? organization.isPublic.toString() : 'true',\n                    isIndigenous: organization.isIndigenous ? organization.isIndigenous.toString() : 'false',\n                    medias: [mediaIds[0]],\n                    isAvailable: organization.isAvailable ? organization.isAvailable.toString() : 'false',\n                    icon: mediaIds[1],\n                    openHours: {\n                        monday: organization.openHours.monday,\n                        tuesday: organization.openHours.tuesday,\n                        wednesday: organization.openHours.wednesday,\n                        thursday: organization.openHours.thursday,\n                        friday: organization.openHours.friday,\n                        saturday: organization.openHours.saturday,\n                        sunday: organization.openHours.sunday\n                    }\n                }\n                console.log('addObject', addObject)\n                const response = await AddOrganization(addObject)\n                if (response.ok) {\n                    setToastMessage([\n                        { title: 'Congrats!', description: 'The ' + organization.name + ' organization has been successfuly created', type: 'success' }\n                    ])\n                }\n                else {\n                    setToastMessage([\n                        { title: 'Error!', description: 'An error occured while processing the request', type: 'danger' }\n                    ])\n                }\n            }\n            setaddingLoader(false)\n        }\n        await UploadManyMedias([{ content: mediaFile, type: 'media' }, { content: iconFile, type: 'icon' }], setToastMessage, addOrganizationCallback)\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n    return (\n        <>\n            <CCard>\n                <CCardBody>\n                    <CRow>\n                        <CCol sm=\"12\">\n                            <h4 id=\"traffic\" className=\"card-title mb-0\">{'Add new organization'}</h4>\n                            <div className=\"small text-muted\">{new Date().toDateString()}</div>\n                        </CCol>\n                    </CRow>\n                </CCardBody>\n            </CCard>\n            <CForm action=\"\" method=\"organization\" onSubmit={handleAdd}>\n                <CRow>\n                    <CCol sm=\"12\">\n                        <CCard>\n                            <CCardBody>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Organization Name</CLabel>\n                                    <CInput type=\"text\" id=\"name\" required placeholder=\"Enter Name...\" onInput={(ev) => setOrganization({ ...organization, name: ev.target.value })} autoComplete=\"name\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"phone\">Phone Number:</CLabel>\n                                        <CInput type=\"number\" id=\"phone\" placeholder=\"Enter phone number...\" onInput={(ev) => setOrganization({ ...organization, contact: { ...organization.contact, phone: ev.target.value } })} autoComplete=\"phone\" />\n                                    </CCol>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"email\">Email:</CLabel>\n                                        <CInput type=\"email\" id=\"email\" placeholder=\"Enter email...\" onInput={(ev) => setOrganization({ ...organization, contact: { ...organization.contact, email: ev.target.value } })} autoComplete=\"email\" />\n                                    </CCol>\n                                    <CCol sm=\"4\">\n                                        <CLabel htmlFor=\"website\">Website:</CLabel>\n                                        <CInput type=\"text\" id=\"website\" placeholder=\"Enter website...\" onInput={(ev) => setOrganization({ ...organization, contact: { ...organization.contact, website: ev.target.value } })} autoComplete=\"website\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"name\">Address:</CLabel>\n                                    <CInput type=\"text\" id=\"address\" required placeholder=\"Enter address...\" onInput={(ev) => setOrganization({ ...organization, contact: { ...organization.contact, address: ev.target.value } })} autoComplete=\"address\" />\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CLabel col md=\"1\" htmlFor=\"file-input\">Image/Video</CLabel>\n                                    <CCol xs=\"12\" md=\"9\" className=\"ml-n3 mt-1\">\n                                        <CInputFile id=\"file-input\" required name=\"file-input\" onChange={(ev) => setMediaFile(ev.target.files[0])} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CLabel col md=\"1\" htmlFor=\"icon\">Icon</CLabel>\n                                    <CCol xs=\"12\" md=\"9\" className=\"ml-n3 mt-1\">\n                                        <CInputFile id=\"icon\" required name=\"icon\" onChange={(ev) => setIconFile(ev.target.files[0])} />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"select\">Category</CLabel>\n                                    <CCol xs=\"12\" md=\"3\">\n                                        <CSelect custom name=\"category\" className=\"ml-n3\" id=\"category\" required onChange={(ev) => { setOrganization({ ...organization, category: ev.target.value }) }}>\n                                            {categories.filter(category => category.type === 'organization').map(category => {\n                                                return <option key={category._id} value={category._id}>{category.name}</option>\n                                            })}\n                                        </CSelect>\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel className=\"mt-4\" htmlFor=\"open-hours-monday\">Weekly open hours:</CLabel>\n                                </CFormGroup>\n                                <CFormGroup row className=\"border p-3 ml-1 mr-1 mb-5\">\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-monday\">Monday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-monday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, monday: ev.target.value } })} autoComplete=\"monday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-tuesday\">Tuesday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-tuesday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, tuesday: ev.target.value } })} autoComplete=\"tuesday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-wednesday\">Wednesday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-wednesday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, wednesday: ev.target.value } })} autoComplete=\"wednesday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-thursday\">Thursday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-thursday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, thursday: ev.target.value } })} autoComplete=\"thursday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-friday\">Friday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-friday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, friday: ev.target.value } })} autoComplete=\"friday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-saturday\">Saturday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-saturday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, saturday: ev.target.value } })} autoComplete=\"saturday\" />\n                                    </CCol>\n                                    <CCol>\n                                        <CLabel htmlFor=\"open-hours-sunday\">Sunday</CLabel>\n                                        <CInput type=\"text\" id=\"open-hours-sunday\" placeholder=\"Enter open hours...\" onInput={(ev) => setOrganization({ ...organization, openHours: { ...organization.openHours, sunday: ev.target.value } })} autoComplete=\"sunday\" />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row>\n                                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label mr-n5\">\n                                        I want this organization to be visible:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n4\">\n                                        <CSwitch\n                                            onChange={(ev) => setOrganization({ ...organization, isPublic: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                            defaultChecked\n                                        />\n                                    </CCol>\n                                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label\">\n                                        Is this organization Indigenous:\n                                    </CCol>\n                                    <CCol sm=\"1\" className=\"ml-n5\">\n                                        <CSwitch\n                                            onChange={(ev) => setOrganization({ ...organization, isIndigenous: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                        />\n                                    </CCol>\n                                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label\">\n                                        Is this organization Available at this moment:\n                                    </CCol>\n                                    <CCol sm=\"1\">\n                                        <CSwitch\n                                            onChange={(ev) => setOrganization({ ...organization, isAvailable: ev.target.checked })}\n                                            className=\"ml-n4 mt-1\"\n                                            color=\"info\"\n                                            defaultChecked\n                                        />\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\n                                    <Editor\n                                        apiKey=\"1jrhxry4u21vyt133p3fetgz3s60eyigcj4zi629g6vczaia\"\n                                        initialValue=\"\"\n                                        init={{\n                                            height: 500,\n                                            menubar: false,\n                                            plugins: [\n                                                'advlist autolink lists link image charmap preview hr anchor pagebreak',\n                                                'searchreplace wordcount visualblocks visualchars code',\n                                                'insertdatetime media nonbreaking table directionality',\n                                                'emoticons template paste textpattern imagetools codesample'\n                                            ],\n                                            toolbar: 'bold italic sizeselect fontselect fontsizeselect | hr alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | insertfile undo redo | forecolor backcolor emoticons | ',\n                                        }}\n                                        onEditorChange={(content, editor) => {\n                                            setOrganization({ ...organization, description: content })\n                                        }}\n                                    />\n                                </CFormGroup>\n                            </CCardBody>\n                            <CCardFooter className=\"d-flex\">\n                                <CButton type=\"submit\" size=\"md\" className=\"btn btn-info\">Add Organization</CButton> <CLink size=\"sm\" className=\"btn btn-danger ml-2\">Cancel</CLink>\n                                {addingLoader ? <div className=\"w-25\"><CSpinner className=\"ml-2\" /></div> : null}\n                            </CCardFooter>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </CForm>\n            {toastMessages.map(toastMessage => {\n                return <CToaster\n                    position={'bottom-right'}\n                    key={'toaster' + toastMessages.id}\n                >\n                    {\n                        <CToast\n                            key={Math.floor(Math.random() * 1000000)}\n                            show={true}\n                            autohide={3000}\n                            fade={true}\n                            color={toastMessage.type}\n                        >\n                            <CToastHeader closeButton={true}>\n                                {toastMessage.title}\n                            </CToastHeader>\n                            <CToastBody>\n                                {toastMessage.description}\n                            </CToastBody>\n                        </CToast>\n                    }\n                </CToaster>\n            })\n            }\n        </>\n    )\n}\n\nexport default OrganizationsAdd\n"],"sourceRoot":""}